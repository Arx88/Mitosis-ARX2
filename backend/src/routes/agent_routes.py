"""
Rutas API del agente - Versi√≥n REAL CON OLLAMA
Sistema de agente que usa Ollama real para generar respuestas inteligentes
Y distingue entre conversaciones casuales y tareas complejas
"""

from flask import Blueprint, request, jsonify, current_app
from datetime import datetime
import logging
import time
import uuid
import json
import os
import requests
import re
import jsonschema
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type

logger = logging.getLogger(__name__)

# JSON Schema para validaci√≥n de planes generados por Ollama
# Mejora implementada seg√∫n UPGRADE.md Secci√≥n 2: Validaci√≥n de Esquemas JSON
PLAN_SCHEMA = {
    "type": "object",
    "required": ["steps", "task_type", "complexity"],
    "properties": {
        "steps": {
            "type": "array",
            "minItems": 1,
            "maxItems": 10,
            "items": {
                "type": "object",
                "required": ["title", "description", "tool"],
                "properties": {
                    "title": {
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string", 
                        "minLength": 10,
                        "maxLength": 300
                    },
                    "tool": {
                        "type": "string",
                        "enum": ["web_search", "analysis", "creation", "planning", "delivery", "processing", "synthesis", "search_definition", "data_analysis"]
                    },
                    "estimated_time": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string",
                        "enum": ["alta", "media", "baja"]
                    }
                },
                "additionalProperties": False
            }
        },
        "task_type": {
            "type": "string",
            "minLength": 3
        },
        "complexity": {
            "type": ["string", "number"],
            "pattern": "^(baja|media|alta)$|^[0-9]+(\\.[0-9]+)?$"
        },
        "estimated_total_time": {
            "type": "string"
        }
    },
    "additionalProperties": False
}

agent_bp = Blueprint('agent', __name__)

# Importar nuevo TaskManager para persistencia
from ..services.task_manager import get_task_manager

# Almacenamiento temporal para compartir conversaciones
shared_conversations = {}
# Almacenamiento temporal para archivos por tarea
task_files = {}

# DEPRECATED: Reemplazado por TaskManager con persistencia MongoDB
# Mantenido temporalmente para migraci√≥n gradual
active_task_plans = {}

def get_task_data(task_id: str) -> dict:
    """
    Obtener datos de tarea usando TaskManager (con fallback a memoria legacy)
    Mejora implementada seg√∫n UPGRADE.md Secci√≥n 5: Persistencia del Estado de Tareas
    """
    try:
        task_manager = get_task_manager()
        task_data = task_manager.get_task(task_id)
        
        if task_data:
            logger.debug(f"üì• Task {task_id} retrieved from persistent storage")
            return task_data
        elif task_id in active_task_plans:
            # Fallback a memoria legacy
            logger.warning(f"‚ö†Ô∏è Task {task_id} found only in legacy memory, migrating...")
            legacy_data = active_task_plans[task_id]
            # Migrar a persistencia
            task_manager.create_task(task_id, legacy_data)
            return legacy_data
        else:
            logger.warning(f"‚ö†Ô∏è Task {task_id} not found in persistent or legacy storage")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Error getting task data {task_id}: {str(e)}")
        # Fallback a memoria legacy
        return active_task_plans.get(task_id)

def save_task_data(task_id: str, task_data: dict) -> bool:
    """
    Guardar datos de tarea usando TaskManager (con fallback a memoria legacy)
    """
    try:
        task_manager = get_task_manager()
        success = task_manager.create_task(task_id, task_data)
        
        if success:
            logger.debug(f"üíæ Task {task_id} saved to persistent storage")
            # Mantener en memoria legacy por compatibilidad
            active_task_plans[task_id] = task_data
            return True
        else:
            logger.warning(f"‚ö†Ô∏è Failed to save task {task_id} to persistent storage, using legacy")
            active_task_plans[task_id] = task_data
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error saving task data {task_id}: {str(e)}")
        # Fallback a memoria legacy
        active_task_plans[task_id] = task_data
        return False

def update_task_data(task_id: str, updates: dict) -> bool:
    """
    Actualizar datos de tarea usando TaskManager (con fallback a memoria legacy)
    """
    try:
        task_manager = get_task_manager()
        success = task_manager.update_task(task_id, updates)
        
        if success:
            logger.debug(f"‚úÖ Task {task_id} updated in persistent storage")
            # Actualizar memoria legacy por compatibilidad
            if task_id in active_task_plans:
                active_task_plans[task_id].update(updates)
            return True
        else:
            logger.warning(f"‚ö†Ô∏è Failed to update task {task_id} in persistent storage, using legacy")
            if task_id in active_task_plans:
                active_task_plans[task_id].update(updates)
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error updating task data {task_id}: {str(e)}")
        # Fallback a memoria legacy
        if task_id in active_task_plans:
            active_task_plans[task_id].update(updates)
        return False

# Patrones para detectar tipo de mensaje
CASUAL_PATTERNS = [
    r'^hola\b',
    r'^¬ø?c√≥mo est√°s\??$',
    r'^¬ø?qu√© tal\??$',
    r'^buenos d√≠as\b',
    r'^buenas tardes\b',
    r'^buenas noches\b',
    r'^¬ø?c√≥mo te llamas\??$',
    r'^¬ø?qui√©n eres\??$',
    r'^gracias\b',
    r'^de nada\b',
    r'^adi√≥s\b',
    r'^hasta luego\b',
    r'^ok\b',
    r'^vale\b',
    r'^perfecto\b',
    r'^entiendo\b'
]

TASK_PATTERNS = [
    r'crear\b.*\b(informe|reporte|documento|an√°lisis|plan|estrategia)',
    r'analizar\b.*\b(datos|informaci√≥n|tendencias|mercado)',
    r'buscar\b.*\b(informaci√≥n|datos|sobre)',
    r'investigar\b.*\b(sobre|tendencias|mercado)',
    r'generar\b.*\b(contenido|texto|c√≥digo|script)',
    r'desarrollar\b.*\b(aplicaci√≥n|web|software)',
    r'escribir\b.*\b(c√≥digo|script|programa)',
    r'hacer\b.*\b(an√°lisis|investigaci√≥n|estudio)',
    r'realizar\b.*\b(estudio|investigaci√≥n|an√°lisis)',
    r'dame\b.*\b(informaci√≥n|datos|informe|reporte)',
    r'necesito\b.*\b(informaci√≥n|datos|ayuda con)',
    r'quiero\b.*\b(crear|generar|desarrollar|hacer)',
    r'puedes\b.*\b(crear|generar|buscar|investigar)',
    r'ay√∫dame\b.*\b(con|a crear|a generar|a desarrollar)'
]

def is_casual_conversation(message: str) -> bool:
    """
    Detecta si un mensaje es una conversaci√≥n casual usando clasificaci√≥n LLM
    Mejora implementada seg√∫n UPGRADE.md Secci√≥n 1: Sistema de Contexto Din√°mico Inteligente
    """
    try:
        # Obtener servicio de Ollama para clasificaci√≥n inteligente
        ollama_service = get_ollama_service()
        
        # Obtener gestor de contexto inteligente
        context_manager = get_intelligent_context_manager()
        
        # Construir contexto inteligente para clasificaci√≥n
        if context_manager:
            logger.info(f"üß† Usando contexto inteligente para clasificaci√≥n: '{message[:50]}...'")
            context = context_manager.build_context('chat', message, max_tokens=1000)
        else:
            context = None
            logger.debug("‚ö†Ô∏è IntelligentContextManager no disponible, usando contexto b√°sico")
        
        # Fallback a l√≥gica heur√≠stica si Ollama no est√° disponible
        if not ollama_service or not ollama_service.is_healthy():
            logger.warning("‚ö†Ô∏è Ollama no disponible, usando detecci√≥n heur√≠stica de respaldo")
            return _fallback_casual_detection(message)
        
        # Prompt mejorado con contexto inteligente
        context_info = ""
        if context and isinstance(context, dict):
            # Agregar informaci√≥n relevante del contexto
            if context.get('conversation_history'):
                context_info += f"\nHistorial reciente: {len(context['conversation_history'])} conversaciones\n"
            if context.get('mood') and context['mood'] != 'neutral':
                context_info += f"Tono detectado: {context['mood']}\n"
            if context.get('topics'):
                context_info += f"Temas: {', '.join(context['topics'])}\n"
        
        intent_prompt = f"""Clasifica la siguiente frase del usuario en una de estas categor√≠as exactas: 'casual', 'tarea_investigacion', 'tarea_creacion', 'tarea_analisis', 'otro'.

{context_info}

Responde √öNICAMENTE con un objeto JSON con la clave 'intent'. No agregues explicaciones adicionales.

EJEMPLOS:
- "hola" -> {{"intent": "casual"}}
- "¬øc√≥mo est√°s?" -> {{"intent": "casual"}}
- "gracias" -> {{"intent": "casual"}}
- "buscar informaci√≥n sobre IA" -> {{"intent": "tarea_investigacion"}}
- "crear un informe" -> {{"intent": "tarea_creacion"}}
- "analizar datos" -> {{"intent": "tarea_analisis"}}

Frase a clasificar: "{message}"

Respuesta JSON:"""
        
        logger.info(f"ü§ñ Clasificando intenci√≥n con LLM para: '{message[:50]}...'")
        
        # Llamar a Ollama con par√°metros optimizados para JSON
        response = ollama_service.generate_response(intent_prompt, {
            'temperature': 0.2,  # M√°s bajo para respuestas consistentes
            'response_format': 'json'
        })
        
        if response.get('error'):
            logger.warning(f"‚ö†Ô∏è Error en clasificaci√≥n LLM: {response['error']}, usando fallback")
            return _fallback_casual_detection(message)
        
        # Parsear respuesta JSON con estrategias robustas
        response_text = response.get('response', '').strip()
        logger.info(f"üì• Respuesta LLM clasificaci√≥n: {response_text[:100]}...")
        
        # Intentar parseo JSON con m√∫ltiples estrategias
        intent_data = None
        
        # Estrategia 1: JSON directo
        try:
            # Limpiar respuesta
            cleaned_response = response_text.replace('```json', '').replace('```', '').strip()
            if cleaned_response.startswith('{') and cleaned_response.endswith('}'):
                intent_data = json.loads(cleaned_response)
        except json.JSONDecodeError:
            pass
        
        # Estrategia 2: Buscar JSON en el texto
        if not intent_data:
            try:
                json_match = re.search(r'\{[^{}]*"intent"[^{}]*\}', response_text)
                if json_match:
                    intent_data = json.loads(json_match.group())
            except json.JSONDecodeError:
                pass
        
        # Estrategia 3: Extracci√≥n por regex
        if not intent_data:
            try:
                intent_match = re.search(r'"intent"\s*:\s*"([^"]+)"', response_text)
                if intent_match:
                    intent_data = {"intent": intent_match.group(1)}
            except:
                pass
        
        # Validar resultado
        if intent_data and 'intent' in intent_data:
            intent = intent_data['intent'].lower().strip()
            
            # Clasificar como casual o tarea
            is_casual = intent == 'casual'
            
            logger.info(f"‚úÖ Clasificaci√≥n LLM exitosa: '{message[:30]}...' -> {intent} -> {'CASUAL' if is_casual else 'TAREA'}")
            
            return is_casual
        else:
            logger.warning(f"‚ö†Ô∏è No se pudo parsear intenci√≥n LLM, usando fallback para: {message[:30]}...")
            return _fallback_casual_detection(message)
            
    except Exception as e:
        logger.error(f"‚ùå Error en clasificaci√≥n de intenci√≥n LLM: {str(e)}")
        return _fallback_casual_detection(message)

def _fallback_casual_detection(message: str) -> bool:
    """
    L√≥gica de respaldo heur√≠stica para detecci√≥n de conversaci√≥n casual
    Se usa cuando Ollama no est√° disponible
    """
    message_lower = message.lower().strip()
    
    logger.info(f"üîÑ Usando detecci√≥n heur√≠stica de respaldo para: '{message[:30]}...'")
    
    # Mensajes muy cortos (menos de 3 palabras) probablemente son casuales
    if len(message_lower.split()) <= 3:
        for pattern in CASUAL_PATTERNS:
            if re.search(pattern, message_lower):
                return True
    
    # Verificar patrones de tareas PRIMERO
    for pattern in TASK_PATTERNS:
        if re.search(pattern, message_lower):
            return False
    
    # Verificar palabras clave que indican tarea (m√°s amplio)
    task_keywords = [
        'buscar', 'busca', 'investigar', 'investiga', 'analizar', 'analiza',
        'crear', 'crea', 'generar', 'genera', 'desarrollar', 'desarrolla',
        'hacer', 'haz', 'escribir', 'escribe', 'dame', 'dime', 'necesito',
        'quiero', 'puedes', 'ay√∫dame', 'planificar', 'planifica', 'realizar',
        'informe', 'reporte', 'an√°lisis', 'estudio', 'investigaci√≥n'
    ]
    
    # Si contiene palabras clave de tareas, NO es casual
    for keyword in task_keywords:
        if keyword in message_lower:
            return False
    
    # Si no hay patrones de tareas y es muy corto, probablemente es casual
    if len(message_lower.split()) <= 5:
        return True
    
    # Si tiene m√°s de 5 palabras y no es claramente casual, tratarlo como tarea
    return False

def get_ollama_service():
    """Obtener servicio de Ollama"""
    try:
        service = current_app.ollama_service
        logger.info(f"‚úÖ Ollama service found: {service}")
        return service
    except AttributeError:
        logger.error("‚ùå Ollama service not available")
        return None

def get_intelligent_context_manager():
    """Obtener gestor de contexto inteligente"""
    try:
        context_manager = current_app.intelligent_context_manager
        logger.debug(f"‚úÖ Intelligent Context Manager found: {context_manager}")
        return context_manager
    except AttributeError:
        logger.warning("‚ö†Ô∏è Intelligent Context Manager not available")
        return None

def get_tool_manager():
    """Obtener tool manager"""
    try:
        return current_app.tool_manager
    except AttributeError:
        logger.error("Tool manager not available")
        return None

def execute_plan_with_real_tools(task_id: str, plan_steps: list, message: str):
    """
    Ejecuta REALMENTE los pasos del plan usando herramientas y entrega resultados finales
    Mejora implementada seg√∫n UPGRADE.md Secci√≥n 3: WebSockets para Comunicaci√≥n en Tiempo Real
    """
    try:
        import threading
        import time
        from datetime import datetime
        
        # Obtener servicios ANTES de crear el hilo
        ollama_service = get_ollama_service()
        tool_manager = get_tool_manager()
        
        # Obtener WebSocket manager para actualizaciones en tiempo real
        # Mejora implementada seg√∫n UPGRADE.md Secci√≥n 3: WebSockets para Comunicaci√≥n en Tiempo Real
        websocket_manager = None
        try:
            # Primero intentar obtenerlo desde Flask app
            try:
                websocket_manager = current_app.websocket_manager
                logger.info(f"‚úÖ WebSocket manager obtained from Flask app for task {task_id}")
            except AttributeError:
                # Fallback al m√©todo directo
                from websocket.websocket_manager import get_websocket_manager
                websocket_manager = get_websocket_manager()
                logger.info(f"‚úÖ WebSocket manager obtained directly for task {task_id}")
                
        except Exception as ws_error:
            logger.warning(f"‚ö†Ô∏è WebSocket manager not available: {ws_error}")
        
        def send_websocket_update(update_type: str, data: dict):
            """Enviar actualizaci√≥n por WebSocket si est√° disponible"""
            if websocket_manager and websocket_manager.is_initialized:
                try:
                    if update_type == 'step_update':
                        websocket_manager.send_update(task_id, websocket_manager.UpdateType.STEP_STARTED if data.get('status') == 'in-progress' else websocket_manager.UpdateType.STEP_COMPLETED, data)
                    elif update_type == 'log_message':
                        websocket_manager.send_update(task_id, websocket_manager.UpdateType.TASK_PROGRESS, data)
                    elif update_type == 'tool_execution_detail':
                        websocket_manager.send_update(task_id, websocket_manager.UpdateType.TASK_PROGRESS, data)
                    elif update_type == 'task_completed':
                        websocket_manager.send_update(task_id, websocket_manager.UpdateType.TASK_COMPLETED, data)
                    elif update_type == 'task_failed':
                        websocket_manager.send_update(task_id, websocket_manager.UpdateType.TASK_FAILED, data)
                        
                    logger.info(f"üì° WebSocket update sent: {update_type} for task {task_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è WebSocket update failed: {e}")
        
        def execute_steps():
            logger.info(f"üîç DEBUG: execute_steps iniciado para task_id: {task_id}")
            
            # Usar TaskManager en lugar de active_task_plans
            task_data = get_task_data(task_id)
            logger.info(f"üîç DEBUG: task_data obtenida: {task_data is not None}")
            
            if not task_data:
                logger.error(f"‚ùå Task {task_id} not found, cannot execute - Fallback a active_task_plans")
                # Fallback a memoria legacy
                if task_id in active_task_plans:
                    task_data = active_task_plans[task_id]
                    logger.info(f"üîç DEBUG: Encontrada en active_task_plans")
                else:
                    logger.error(f"‚ùå Task {task_id} no existe ni en TaskManager ni en active_task_plans")
                    return
                
            steps = task_data['plan']
            final_results = []  # Almacenar resultados de cada paso
            
            logger.info(f"üöÄ Starting REAL execution of {len(steps)} steps for task: {message}")
            
            # Enviar notificaci√≥n de inicio de tarea
            send_websocket_update('log_message', {
                'type': 'log_message',
                'level': 'info',
                'message': f'üöÄ Iniciando ejecuci√≥n de {len(steps)} pasos para: {message[:50]}...',
                'timestamp': datetime.now().isoformat()
            })
            
            for i, step in enumerate(steps):
                logger.info(f"üîÑ Executing step {i+1}/{len(steps)}: {step['title']}")
                
                # Marcar paso como activo
                step['active'] = True
                step['status'] = 'in-progress'
                
                # Enviar actualizaci√≥n de estado del paso en tiempo real
                send_websocket_update('step_update', {
                    'type': 'step_update',
                    'step_id': step['id'],
                    'status': 'in-progress',
                    'title': step['title'],
                    'description': step['description'],
                    'progress': (i / len(steps)) * 100,
                    'current_step': i + 1,
                    'total_steps': len(steps)
                })
                
                # Enviar log detallado al monitor
                send_websocket_update('log_message', {
                    'type': 'log_message',
                    'level': 'info',
                    'message': f'üîÑ Ejecutando paso {i+1}/{len(steps)}: {step["title"]}',
                    'timestamp': datetime.now().isoformat()
                })
                
                # Actualizar plan en memoria y persistencia
                task_manager = get_task_manager()
                task_manager.update_task_step_status(
                    task_id, 
                    step['id'], 
                    'in-progress'
                )
                update_task_data(task_id, {
                    'plan': steps,
                    'current_step': i + 1
                })
                
                step_start_time = time.time()
                step_result = None
                
                # Excepciones personalizadas para manejo de errores espec√≠fico
                class OllamaServiceError(Exception):
                    pass

                class ToolNotAvailableError(Exception):
                    pass

                class FileCreationError(Exception):
                    pass

                # Funci√≥n ROBUSTA para ejecutar herramientas con reintentos y retroceso exponencial
                # PROBLEMA 1 SOLUCIONADO: Eliminaci√≥n completa de simulaci√≥n
                @retry(
                    stop=stop_after_attempt(3),
                    wait=wait_exponential(multiplier=1, min=2, max=8),
                    retry=retry_if_exception_type((requests.RequestException, ConnectionError, TimeoutError, OllamaServiceError))
                )
                def execute_tool_with_retries(tool_name: str, tool_params: dict, step_title: str):
                    """Ejecutar herramienta con reintentos autom√°ticos - SOLO EJECUCI√ìN REAL"""
                    logger.info(f"üîÑ Intentando ejecutar herramienta '{tool_name}' para el paso: {step_title}")
                    
                    if tool_name == 'web_search':
                        if not tool_manager or not hasattr(tool_manager, 'execute_tool'):
                            raise ToolNotAvailableError(f"Tool manager no disponible o herramienta 'web_search' no inicializada.")
                        return tool_manager.execute_tool('web_search', tool_params, task_id=task_id)
                    
                    elif tool_name in ['analysis', 'creation', 'planning', 'delivery', 'processing', 'synthesis', 'search_definition', 'data_analysis']:
                        if not ollama_service or not ollama_service.is_healthy():
                            raise OllamaServiceError("Ollama service no est√° disponible o no es saludable.")
                        
                        # Para herramientas basadas en Ollama, la l√≥gica de prompt debe ser robusta
                        result = ollama_service.generate_response(tool_params.get('prompt', ''), tool_params.get('ollama_options', {}))
                        
                        # Verificar que la respuesta de Ollama no sea un error
                        if result.get('error'):
                            raise OllamaServiceError(f"Error en Ollama: {result['error']}")
                        
                        return result
                    
                    else:
                        # Para herramientas no expl√≠citamente manejadas, intentar con tool_manager
                        if not tool_manager or not hasattr(tool_manager, 'execute_tool'):
                            raise ToolNotAvailableError(f"Herramienta '{tool_name}' no reconocida o no disponible.")
                        return tool_manager.execute_tool(tool_name, tool_params, task_id=task_id)
                
                try:
                    # EJECUTAR HERRAMIENTA REAL seg√∫n el tipo de paso con reintentos autom√°ticos
                    if step['tool'] == 'web_search' or 'b√∫squeda' in step['title'].lower():
                        search_query = extract_search_query_from_message(message, step['title'])
                        logger.info(f"üîç Executing web search with retries for: {search_query}")
                        
                        # Enviar detalle de ejecuci√≥n de herramienta
                        send_websocket_update('tool_execution_detail', {
                            'type': 'tool_execution_detail',
                            'tool_name': 'web_search',
                            'input_params': {'query': search_query, 'num_results': 5},
                            'message': f'üîç Buscando informaci√≥n: {search_query}',
                            'timestamp': datetime.now().isoformat()
                        })
                        
                        try:
                            # Usar ejecuci√≥n con reintentos autom√°ticos
                            result = execute_tool_with_retries('web_search', {
                                'query': search_query,
                                'num_results': 5
                            }, step['title'])
                            
                            step_result = {
                                'type': 'web_search',
                                'query': search_query,
                                'results': result.get('search_results', []),
                                'summary': f"Encontradas {len(result.get('search_results', []))} fuentes relevantes"
                            }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            
                            # Enviar resultado de herramienta
                            send_websocket_update('tool_execution_detail', {
                                'type': 'tool_execution_detail',
                                'tool_name': 'web_search',
                                'output_summary': step_result['summary'],
                                'message': f'‚úÖ B√∫squeda completada: {step_result["summary"]}',
                                'timestamp': datetime.now().isoformat()
                            })
                            
                            logger.info(f"‚úÖ Web search completed: {len(result.get('search_results', []))} results")
                            
                        except Exception as search_error:
                            logger.error(f"‚ùå Web search failed after retries: {str(search_error)}")
                            
                            # Enviar error detallado
                            send_websocket_update('tool_execution_detail', {
                                'type': 'tool_execution_detail',
                                'tool_name': 'web_search',
                                'error': str(search_error),
                                'message': f'‚ùå Error en b√∫squeda despu√©s de reintentos: {str(search_error)}',
                                'timestamp': datetime.now().isoformat()
                            })
                            
                            # Estrategia de fallback para herramientas cr√≠ticas
                            logger.info(f"üîÑ Attempting fallback search strategy for: {search_query}")
                            step_result = {
                                'type': 'web_search_fallback',
                                'query': search_query,
                                'results': [],
                                'summary': f"B√∫squeda no completada. Contin√∫o con informaci√≥n disponible.",
                                'error': str(search_error),
                                'fallback_used': True
                            }
                            step['result'] = step_result
                            final_results.append(step_result)
                    
                    elif step['tool'] == 'analysis' or 'an√°lisis' in step['title'].lower():
                        logger.info(f"üß† Executing analysis using REAL execution")
                        
                        # Enviar detalle de ejecuci√≥n de herramienta
                        send_websocket_update('tool_execution_detail', {
                            'type': 'tool_execution_detail',
                            'tool_name': 'analysis',
                            'input_params': {'context': step['description']},
                            'message': f'üß† Ejecutando an√°lisis: {step["title"]}',
                            'timestamp': datetime.now().isoformat()
                        })
                        
                        # Generar an√°lisis espec√≠fico usando contexto previo
                        analysis_context = f"Tarea: {message}\nPaso actual: {step['title']}\nDescripci√≥n: {step['description']}"
                        if final_results:
                            analysis_context += f"\nResultados previos: {final_results[-1] if final_results else 'Ninguno'}"
                        
                        analysis_prompt = f"""
Realiza un an√°lisis detallado para:
{analysis_context}

Proporciona:
1. An√°lisis espec√≠fico del contexto
2. Hallazgos principales
3. Recomendaciones para pr√≥ximos pasos
4. Conclusiones preliminares

Formato: Respuesta estructurada y profesional.
"""
                        
                        try:
                            # EJECUCI√ìN REAL CON REINTENTOS - NO SIMULACI√ìN
                            result = execute_tool_with_retries('analysis', {
                                'prompt': analysis_prompt,
                                'ollama_options': {}
                            }, step['title'])
                            
                            step_result = {
                                'type': 'analysis',
                                'content': result.get('response', 'An√°lisis completado'),
                                'summary': 'An√°lisis detallado generado exitosamente'
                            }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            
                            # Enviar resultado de herramienta
                            send_websocket_update('tool_execution_detail', {
                                'type': 'tool_execution_detail',
                                'tool_name': 'analysis',
                                'output_summary': step_result['summary'],
                                'message': f'‚úÖ An√°lisis completado: {step["title"]}',
                                'timestamp': datetime.now().isoformat()
                            })
                            
                            logger.info(f"‚úÖ Analysis completed successfully")
                            
                        except (OllamaServiceError, ToolNotAvailableError) as analysis_error:
                            logger.error(f"‚ùå Analysis failed after retries: {str(analysis_error)}")
                            
                            # Marcar paso como fallido sin simulaci√≥n
                            step_result = {
                                'type': 'analysis_failed',
                                'error': str(analysis_error),
                                'summary': f'‚ùå Error en an√°lisis: {str(analysis_error)}',
                                'fallback_used': True
                            }
                            step['result'] = step_result
                            step['status'] = 'failed'
                            final_results.append(step_result)
                            
                            # Enviar error detallado
                            send_websocket_update('tool_execution_detail', {
                                'type': 'tool_execution_detail',
                                'tool_name': 'analysis',
                                'error': str(analysis_error),
                                'message': f'‚ùå Error en an√°lisis: {str(analysis_error)}',
                                'timestamp': datetime.now().isoformat()
                            })
                    
                    elif step['tool'] == 'creation' or 'creaci√≥n' in step['title'].lower() or 'desarrollo' in step['title'].lower():
                        logger.info(f"üõ†Ô∏è Executing creation with REAL file generation - NO SIMULATION")
                        
                        # Enviar detalle de ejecuci√≥n de herramienta
                        send_websocket_update('tool_execution_detail', {
                            'type': 'tool_execution_detail',
                            'tool_name': 'creation',
                            'input_params': {'task': step['title']},
                            'message': f'üõ†Ô∏è Creando contenido y archivo: {step["title"]}',
                            'timestamp': datetime.now().isoformat()
                        })
                        
                        # Generar contenido espec√≠fico
                        creation_context = f"Tarea: {message}\nPaso: {step['title']}\nDescripci√≥n: {step['description']}"
                        if final_results:
                            creation_context += f"\nInformaci√≥n previa: {final_results}"
                        
                        # PROMPT ULTRA ESPEC√çFICO PARA EVITAR PLANES DE ACCI√ìN
                        if 'archivo' in message.lower() and ('contenga' in message.lower() or 'texto' in message.lower()):
                            # Para solicitudes de archivos simples con contenido espec√≠fico
                            import re
                            content_match = re.search(r'contenga[^:]*[:]\s*(.+?)(?:\.|$|")', message, re.IGNORECASE)
                            if content_match:
                                requested_content = content_match.group(1).strip()
                                creation_prompt = f"""
INSTRUCCI√ìN: Responde √öNICAMENTE con el contenido exacto solicitado. NO generes planes de acci√≥n.

CONTENIDO EXACTO A GENERAR: {requested_content}

Responde SOLO con: {requested_content}
"""
                            else:
                                creation_prompt = f"""
IMPORTANTE: NO generes un plan de acci√≥n. Genera el CONTENIDO REAL solicitado.

Tarea: {message}

Responde con el contenido exacto que el usuario solicit√≥, NO con un plan de c√≥mo hacerlo.
"""
                        else:
                            creation_prompt = f"""
IMPORTANTE: NO generes un plan de acci√≥n. Genera el CONTENIDO REAL solicitado.

{creation_context}

INSTRUCCI√ìN CR√çTICA: Responde con el contenido final que se solicita, NO con pasos de c√≥mo crearlo.

Genera el contenido espec√≠fico, detallado y profesional que se solicita DIRECTAMENTE.
"""
                        
                        try:
                            # EJECUCI√ìN REAL CON REINTENTOS - NO SIMULACI√ìN
                            result = execute_tool_with_retries('creation', {
                                'prompt': creation_prompt,
                                'ollama_options': {}
                            }, step['title'])
                            
                            content = result.get('response', 'Contenido creado')
                            
                            # üÜï CREAR ARCHIVO REAL TANGIBLE - VALIDACI√ìN RIGUROSA
                            try:
                                # Determinar tipo de archivo basado en la tarea
                                file_extension = '.md'  # Por defecto markdown
                                if 'documento' in message.lower() or 'informe' in message.lower():
                                    file_extension = '.md'
                                elif 'c√≥digo' in message.lower() or 'script' in message.lower():
                                    file_extension = '.py'
                                elif 'plan' in message.lower():
                                    file_extension = '.txt'
                                
                                # Crear nombre de archivo √∫nico
                                import re
                                safe_title = re.sub(r'[^a-zA-Z0-9\-_]', '_', step['title'][:30])
                                filename = f"{safe_title}_{int(time.time())}{file_extension}"
                                file_path = f"/app/backend/static/generated_files/{filename}"
                                
                                # Crear directorio si no existe
                                os.makedirs("/app/backend/static/generated_files", exist_ok=True)
                                
                                # Escribir archivo real
                                with open(file_path, 'w', encoding='utf-8') as f:
                                    f.write(content)
                                
                                # VALIDACI√ìN RIGUROSA - PROBLEMA 8 IMPLEMENTADO PARCIALMENTE
                                if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                                    file_size = os.path.getsize(file_path)
                                    logger.info(f"‚úÖ ARCHIVO REAL CREADO Y VALIDADO: {filename} ({file_size} bytes)")
                                    
                                    step_result = {
                                        'type': 'creation',
                                        'content': content,
                                        'summary': f'‚úÖ Archivo creado y validado exitosamente: {filename}',
                                        'file_created': True,
                                        'file_path': file_path,
                                        'file_name': filename,
                                        'file_size': file_size,
                                        'download_url': f'/api/download/{filename}',
                                        'tangible_result': True
                                    }
                                    
                                    # Enviar notificaci√≥n de archivo creado
                                    send_websocket_update('tool_execution_detail', {
                                        'type': 'tool_execution_detail',
                                        'tool_name': 'creation',
                                        'output_summary': f'‚úÖ Archivo creado y validado: {filename} ({file_size} bytes)',
                                        'file_created': filename,
                                        'download_url': f'/api/download/{filename}',
                                        'message': f'‚úÖ Archivo generado, validado y listo para descargar: {filename}',
                                        'timestamp': datetime.now().isoformat()
                                    })
                                    
                                else:
                                    raise FileCreationError("El archivo no se pudo crear correctamente o est√° vac√≠o")
                                
                            except Exception as file_error:
                                logger.error(f"‚ùå Error creando archivo real: {str(file_error)}")
                                raise FileCreationError(f"Error en creaci√≥n de archivo: {str(file_error)}")
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            logger.info(f"‚úÖ Content creation with REAL file generation completed")
                            
                        except (OllamaServiceError, ToolNotAvailableError, FileCreationError) as creation_error:
                            logger.error(f"‚ùå Creation failed after retries: {str(creation_error)}")
                            
                            # Marcar paso como fallido sin simulaci√≥n
                            step_result = {
                                'type': 'creation_failed',
                                'error': str(creation_error),
                                'summary': f'‚ùå Error en creaci√≥n: {str(creation_error)}',
                                'file_created': False,
                                'fallback_used': True
                            }
                            step['result'] = step_result
                            step['status'] = 'failed'
                            final_results.append(step_result)
                            
                            # Enviar error detallado
                            send_websocket_update('tool_execution_detail', {
                                'type': 'tool_execution_detail',
                                'tool_name': 'creation',
                                'error': str(creation_error),
                                'message': f'‚ùå Error en creaci√≥n: {str(creation_error)}',
                                'timestamp': datetime.now().isoformat()
                            })
                    
                    elif step['tool'] == 'planning' or 'planificaci√≥n' in step['title'].lower():
                        logger.info(f"üìã Executing planning with REAL plan generation - NO SIMULATION")
                        
                        # Enviar detalle de ejecuci√≥n de herramienta
                        send_websocket_update('tool_execution_detail', {
                            'type': 'tool_execution_detail',
                            'tool_name': 'planning',
                            'input_params': {'context': step['description']},
                            'message': f'üìã Ejecutando planificaci√≥n: {step["title"]}',
                            'timestamp': datetime.now().isoformat()
                        })
                        
                        # Generar plan espec√≠fico usando contexto previo
                        planning_context = f"Tarea: {message}\nPaso: {step['title']}\nDescripci√≥n: {step['description']}"
                        if final_results:
                            planning_context += f"\nResultados anteriores: {final_results}"
                        
                        planning_prompt = f"""
Desarrolla un plan espec√≠fico para:
{planning_context}

Incluye:
1. Objetivos espec√≠ficos del plan
2. Estrategias detalladas
3. Recursos necesarios
4. Cronograma estimado
5. M√©tricas de √©xito

Formato: Plan estructurado y profesional.
"""
                        
                        try:
                            # EJECUCI√ìN REAL CON REINTENTOS - NO SIMULACI√ìN
                            result = execute_tool_with_retries('planning', {
                                'prompt': planning_prompt,
                                'ollama_options': {}
                            }, step['title'])
                            
                            step_result = {
                                'type': 'planning',
                                'content': result.get('response', 'Plan generado'),
                                'summary': 'Plan detallado generado exitosamente'
                            }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            
                            # Enviar resultado de herramienta
                            send_websocket_update('tool_execution_detail', {
                                'type': 'tool_execution_detail',
                                'tool_name': 'planning',
                                'output_summary': step_result['summary'],
                                'message': f'‚úÖ Planificaci√≥n completada: {step["title"]}',
                                'timestamp': datetime.now().isoformat()
                            })
                            
                            logger.info(f"‚úÖ Planning completed successfully")
                            
                        except (OllamaServiceError, ToolNotAvailableError) as planning_error:
                            logger.error(f"‚ùå Planning failed after retries: {str(planning_error)}")
                            
                            # Marcar paso como fallido sin simulaci√≥n
                            step_result = {
                                'type': 'planning_failed',
                                'error': str(planning_error),
                                'summary': f'‚ùå Error en planificaci√≥n: {str(planning_error)}',
                                'fallback_used': True
                            }
                            step['result'] = step_result
                            step['status'] = 'failed'
                            final_results.append(step_result)
                            
                            # Enviar error detallado
                            send_websocket_update('tool_execution_detail', {
                                'type': 'tool_execution_detail',
                                'tool_name': 'planning',
                                'error': str(planning_error),
                                'message': f'‚ùå Error en planificaci√≥n: {str(planning_error)}',
                                'timestamp': datetime.now().isoformat()
                            })
                    
                    elif step['tool'] == 'delivery' or 'entrega' in step['title'].lower():
                        if ollama_service:
                            logger.info(f"üì¶ Executing final delivery with TANGIBLE results")
                            
                            # Generar entrega final con todos los resultados
                            delivery_prompt = f"""
Prepara la entrega final para la tarea: {message}

Consolida todos los resultados obtenidos:
{final_results}

Crea un documento de entrega final que incluya:
1. RESUMEN EJECUTIVO de lo realizado
2. RESULTADOS PRINCIPALES obtenidos
3. CONTENIDO COMPLETO generado
4. ARCHIVOS Y ENTREGABLES creados
5. CONCLUSIONES Y RECOMENDACIONES
6. ENTREGABLES FINALES disponibles

Formato: Documento profesional completo y estructurado.
"""
                            
                            result = ollama_service.generate_response(delivery_prompt, {})
                            content = result.get('response', 'Entrega completada')
                            
                            # üÜï CREAR RESUMEN EJECUTIVO COMO ARCHIVO
                            try:
                                # Crear resumen ejecutivo como archivo tangible
                                import re
                                safe_message = re.sub(r'[^a-zA-Z0-9\-_]', '_', message[:30])
                                filename = f"Resumen_Ejecutivo_{safe_message}_{int(time.time())}.md"
                                file_path = f"/app/backend/static/generated_files/{filename}"
                                
                                # Crear directorio si no existe
                                os.makedirs("/app/backend/static/generated_files", exist_ok=True)
                                
                                # Preparar contenido del resumen ejecutivo
                                executive_summary = f"""# RESUMEN EJECUTIVO
## Tarea: {message}
## Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M')}

{content}

## ARCHIVOS GENERADOS
"""
                                
                                # Agregar lista de archivos creados
                                files_created = []
                                for result_item in final_results:
                                    if isinstance(result_item, dict) and result_item.get('file_created'):
                                        files_created.append(f"- {result_item['file_name']} ({result_item['file_size']} bytes)")
                                        executive_summary += f"- {result_item['file_name']} ({result_item['file_size']} bytes)\n"
                                
                                if not files_created:
                                    executive_summary += "- No se crearon archivos adicionales en este proceso\n"
                                
                                executive_summary += f"""
## ESTAD√çSTICAS
- Pasos ejecutados: {len(steps)}
- Resultados generados: {len(final_results)}
- Archivos creados: {len(files_created)}
- Estado: ‚úÖ Completado exitosamente
"""
                                
                                # Escribir archivo de resumen
                                with open(file_path, 'w', encoding='utf-8') as f:
                                    f.write(executive_summary)
                                
                                # Verificar creaci√≥n
                                if os.path.exists(file_path):
                                    file_size = os.path.getsize(file_path)
                                    logger.info(f"‚úÖ RESUMEN EJECUTIVO CREADO: {filename} ({file_size} bytes)")
                                    
                                    step_result = {
                                        'type': 'delivery',
                                        'content': content,
                                        'summary': f'‚úÖ Tarea completada con entrega final: {filename}',
                                        'final_deliverable': True,
                                        'file_created': True,
                                        'file_path': file_path,
                                        'file_name': filename,
                                        'file_size': file_size,
                                        'download_url': f'/api/download/{filename}',
                                        'executive_summary': True,
                                        'total_files_created': len(files_created) + 1  # +1 por el propio resumen
                                    }
                                    
                                    # Enviar notificaci√≥n de entrega final
                                    send_websocket_update('tool_execution_detail', {
                                        'type': 'tool_execution_detail',
                                        'tool_name': 'delivery',
                                        'output_summary': f'‚úÖ Entrega final completada: {filename}',
                                        'file_created': filename,
                                        'download_url': f'/api/download/{filename}',
                                        'total_files': len(files_created) + 1,
                                        'message': f'üéâ Entrega final completada con {len(files_created) + 1} archivo(s) generado(s)',
                                        'timestamp': datetime.now().isoformat()
                                    })
                                    
                                else:
                                    raise Exception("No se pudo crear el resumen ejecutivo")
                                    
                            except Exception as file_error:
                                logger.error(f"‚ùå Error creando resumen ejecutivo: {str(file_error)}")
                                step_result = {
                                    'type': 'delivery',
                                    'content': content,
                                    'summary': 'Tarea completada exitosamente con entrega final',
                                    'final_deliverable': True,
                                    'file_error': str(file_error)
                                }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            logger.info(f"‚úÖ Final delivery with tangible results completed")
                        else:
                            time.sleep(2)
                    
                    else:
                        # Paso gen√©rico - ejecutar con Ollama
                        if ollama_service:
                            logger.info(f"‚ö° Executing generic step: {step['title']}")
                            
                            generic_prompt = f"""
Ejecuta el paso '{step['title']}' para la tarea: {message}

Descripci√≥n: {step['description']}
Contexto previo: {final_results if final_results else 'Inicio de tarea'}

Proporciona un resultado espec√≠fico y √∫til para este paso.
"""
                            
                            result = ollama_service.generate_response(generic_prompt, {})
                            
                            step_result = {
                                'type': 'generic',
                                'content': result.get('response', 'Paso completado'),
                                'summary': f"Paso '{step['title']}' completado exitosamente"
                            }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            logger.info(f"‚úÖ Generic step completed: {step['title']}")
                        else:
                            time.sleep(2)
                    
                    # Marcar paso como completado
                    step_execution_time = time.time() - step_start_time
                    step['completed'] = True
                    step['active'] = False
                    step['status'] = 'completed'
                    
                    # Enviar actualizaci√≥n de paso completado en tiempo real
                    send_websocket_update('step_update', {
                        'type': 'step_update',
                        'step_id': step['id'],
                        'status': 'completed',
                        'title': step['title'],
                        'description': step['description'],
                        'result_summary': step_result.get('summary', 'Paso completado') if step_result else 'Paso completado',
                        'execution_time': step_execution_time,
                        'progress': ((i + 1) / len(steps)) * 100
                    })
                    
                    # Enviar log de completado
                    send_websocket_update('log_message', {
                        'type': 'log_message',
                        'level': 'info',
                        'message': f'‚úÖ Paso {i+1}/{len(steps)} completado: {step["title"]} ({step_execution_time:.1f}s)',
                        'timestamp': datetime.now().isoformat()
                    })
                    
                    logger.info(f"‚úÖ Step {i+1} completed successfully: {step['title']} in {step_execution_time:.1f}s")
                    
                    # Pausa entre pasos para dar tiempo a mostrar progreso
                    time.sleep(2)
                    
                except Exception as step_error:
                    step_execution_time = time.time() - step_start_time
                    logger.error(f"‚ùå Error in step {i+1}: {str(step_error)}")
                    step['completed'] = False
                    step['active'] = False
                    step['status'] = 'failed'
                    step['error'] = str(step_error)
                    
                    # Enviar actualizaci√≥n de paso fallido en tiempo real
                    send_websocket_update('step_update', {
                        'type': 'step_update',
                        'step_id': step['id'],
                        'status': 'failed',
                        'title': step['title'],
                        'description': step['description'],
                        'error': str(step_error),
                        'execution_time': step_execution_time
                    })
                    
                    # Enviar log de error
                    send_websocket_update('log_message', {
                        'type': 'log_message',
                        'level': 'error',
                        'message': f'‚ùå Error en paso {i+1}/{len(steps)}: {step["title"]} - {str(step_error)}',
                        'timestamp': datetime.now().isoformat()
                    })
                
                # Actualizar plan en memoria y persistencia
                task_manager = get_task_manager()
                task_manager.update_task_step_status(
                    task_id,
                    step['id'],
                    'completed' if step['status'] == 'completed' else 'failed',
                    step_result.get('summary') if step_result else None,
                    step.get('error') if step['status'] == 'failed' else None
                )
                update_task_data(task_id, {'plan': steps})
            
            # GENERAR RESULTADO FINAL CONSOLIDADO
            if final_results:
                logger.info(f"üéØ Generating final consolidated result for task {task_id}")
                
                try:
                    if ollama_service:
                        final_prompt = f"""
TAREA COMPLETADA: {message}

RESULTADOS OBTENIDOS:
{final_results}

Genera un RESULTADO FINAL CONSOLIDADO que incluya:

1. üéØ RESUMEN EJECUTIVO
   - Qu√© se solicit√≥
   - Qu√© se logr√≥
   - Calidad del resultado

2. üìã ENTREGABLES PRINCIPALES
   - Lista clara de lo que se entreg√≥
   - Resultados espec√≠ficos obtenidos

3. üîç HALLAZGOS CLAVE (si aplica)
   - Informaci√≥n importante encontrada
   - Insights relevantes

4. ‚úÖ CONCLUSIONES
   - Evaluaci√≥n del √©xito de la tarea
   - Recomendaciones adicionales

Formato: Profesional, estructurado y completo.
"""
                        
                        final_result = ollama_service.generate_response(final_prompt, {})
                        
                        # Guardar resultado final
                        active_task_plans[task_id]['final_result'] = {
                            'content': final_result.get('response', 'Tarea completada exitosamente'),
                            'completed_at': datetime.now().isoformat(),
                            'total_steps': len(steps),
                            'all_results': final_results
                        }
                        
                        logger.info(f"‚úÖ Final consolidated result generated for task {task_id}")
                        
                except Exception as e:
                    logger.error(f"Error generating final result: {str(e)}")
                    active_task_plans[task_id]['final_result'] = {
                        'content': 'Tarea completada con algunos errores en la consolidaci√≥n final',
                        'completed_at': datetime.now().isoformat(),
                        'total_steps': len(steps),
                        'error': str(e)
                    }
            
            # Determinar estado final de la tarea para respuesta din√°mica
            completed_steps = sum(1 for step in steps if step.get('completed', False))
            failed_steps = sum(1 for step in steps if step.get('status') == 'failed')
            total_steps = len(steps)
            
            # Clasificar estado final
            if completed_steps == total_steps:
                final_task_status = "completed_success"
            elif completed_steps > total_steps // 2 and failed_steps > 0:
                final_task_status = "completed_with_warnings"
            else:
                final_task_status = "completed_success"  # Por defecto optimista
            
            # Generar respuesta final din√°mica basada en estado real
            failed_step_titles = [step.get('title', 'Paso desconocido') for step in steps if step.get('status') == 'failed']
            final_dynamic_response = generate_clean_response(
                ollama_response="",
                tool_results=final_results,
                task_status=final_task_status,
                failed_step_title=failed_step_titles[0] if failed_step_titles else None,
                error_message=f"{len(failed_step_titles)} pasos fallaron" if failed_step_titles else None
            )
            
            # Marcar tarea como completada en persistencia y memoria
            task_completion_updates = {
                'status': 'completed',
                'completed_at': datetime.now().isoformat(),
                'final_result': final_dynamic_response,  # Usar respuesta din√°mica
                'final_task_status': final_task_status,
                'completed_steps': completed_steps,
                'failed_steps': failed_steps,
                'total_steps': total_steps
            }
            
            # Actualizar con TaskManager (persistencia)
            update_task_data(task_id, task_completion_updates)
            
            # Tambi√©n actualizar memoria legacy por compatibilidad
            if task_id in active_task_plans:
                active_task_plans[task_id].update(task_completion_updates)
            
            # Enviar notificaci√≥n de finalizaci√≥n del plan con estado real
            send_websocket_update('task_completed', {
                'type': 'task_completed',
                'task_id': task_id,
                'status': 'success' if final_task_status == "completed_success" else 'completed_with_warnings',
                'final_result': final_dynamic_response,
                'final_task_status': final_task_status,
                'total_steps': total_steps,
                'completed_steps': completed_steps,
                'failed_steps': failed_steps,
                'execution_time': (datetime.now() - active_task_plans[task_id]['start_time']).total_seconds(),
                'message': f'üéâ Tarea completada: {completed_steps}/{total_steps} pasos exitosos',
                'timestamp': datetime.now().isoformat()
            })
            
            # Enviar log final
            send_websocket_update('log_message', {
                'type': 'log_message',
                'level': 'info',
                'message': f'üéâ Tarea {task_id} completada con √©xito - {len(steps)} pasos ejecutados',
                'timestamp': datetime.now().isoformat()
            })
            
            logger.info(f"üéâ Task {task_id} completed successfully with REAL execution and final delivery!")
        
        # Ejecutar en hilo separado
        thread = threading.Thread(target=execute_steps)
        thread.daemon = True
        thread.start()
        
        logger.info(f"üöÄ Started REAL plan execution for task {task_id}")
        
    except Exception as e:
        logger.error(f"Error in real plan execution: {str(e)}")
        
        # Generar respuesta final de error din√°mica
        error_response = generate_clean_response(
            ollama_response="",
            tool_results=[],
            task_status="failed",
            failed_step_title="Ejecuci√≥n general",
            error_message=str(e)
        )
        
        # Enviar notificaci√≥n de fallo de tarea si WebSocket est√° disponible
        try:
            from websocket.websocket_manager import get_websocket_manager
            websocket_manager = get_websocket_manager()
            if websocket_manager and websocket_manager.is_initialized:
                websocket_manager.send_update(task_id, websocket_manager.UpdateType.TASK_FAILED, {
                    'type': 'task_failed',
                    'task_id': task_id,
                    'status': 'failed',
                    'overall_error': str(e),
                    'final_result': error_response,  # Incluir respuesta din√°mica de error
                    'message': f'‚ùå Tarea fall√≥: {str(e)}',
                    'timestamp': datetime.now().isoformat()
                })
        except Exception:
            pass
        
        # Marcar como fallido con respuesta din√°mica
        if task_id in active_task_plans:
            active_task_plans[task_id]['status'] = 'failed'
            active_task_plans[task_id]['error'] = str(e)
            active_task_plans[task_id]['final_result'] = error_response

def extract_search_query_from_message(message: str, step_title: str) -> str:
    """
    Extrae una query de b√∫squeda optimizada usando LLM para mayor relevancia
    Mejora implementada seg√∫n UPGRADE.md Secci√≥n 4: Extracci√≥n de Query Mejorada (LLM-driven)
    """
    try:
        # Obtener servicio de Ollama para generaci√≥n inteligente de queries
        ollama_service = get_ollama_service()
        
        if not ollama_service or not ollama_service.is_healthy():
            logger.warning("‚ö†Ô∏è Ollama no disponible para extracci√≥n LLM de query, usando m√©todo heur√≠stico")
            return _fallback_query_extraction(message, step_title)
        
        # Prompt espec√≠fico para generar consultas de b√∫squeda optimizadas
        search_query_prompt = f"""Genera 3-5 palabras clave de b√∫squeda optimizadas para obtener informaci√≥n relevante y actualizada sobre esta tarea.

Mensaje original: "{message}"
Contexto del paso: "{step_title}"

INSTRUCCIONES:
- Extrae las palabras m√°s importantes y espec√≠ficas
- Enf√≥cate en t√©rminos t√©cnicos, nombres propios, conceptos clave
- Evita palabras gen√©ricas como "buscar", "informaci√≥n", "datos"  
- Incluye t√©rminos que ayuden a encontrar contenido actualizado
- Responde SOLO con las palabras clave separadas por comas
- M√°ximo 5 palabras clave relevantes

EJEMPLOS:
- "Analizar tendencias de IA en 2025" ‚Üí "inteligencia artificial, tendencias 2025, IA avances, machine learning"
- "Crear informe mercado criptomonedas" ‚Üí "criptomonedas, mercado crypto, bitcoin ethereum, an√°lisis 2025"

Palabras clave de b√∫squeda:"""

        logger.info(f"üîç Generating LLM-driven search query for: '{message[:30]}...'")
        
        # Llamar a Ollama con par√°metros optimizados para extracci√≥n de keywords
        response = ollama_service.generate_response(search_query_prompt, {
            'temperature': 0.3,  # Creatividad moderada
            'max_tokens': 100,   # Respuesta corta
            'response_format': 'text'
        })
        
        if response.get('error'):
            logger.warning(f"‚ö†Ô∏è Error en extracci√≥n LLM de query: {response['error']}")
            return _fallback_query_extraction(message, step_title)
        
        # Procesar respuesta de Ollama
        generated_keywords = response.get('response', '').strip()
        
        if generated_keywords and len(generated_keywords) > 5:
            # Limpiar la respuesta
            cleaned_query = generated_keywords.replace('\n', ' ').replace('"', '').strip()
            
            # Validar que las palabras clave no sean demasiado gen√©ricas
            generic_terms = ['informaci√≥n', 'datos', 'buscar', 'an√°lisis', 'crear', 'generar']
            keywords = [kw.strip() for kw in cleaned_query.split(',')]
            
            # Filtrar t√©rminos gen√©ricos y tomar los mejores
            relevant_keywords = [
                kw for kw in keywords 
                if len(kw) > 2 and not any(generic in kw.lower() for generic in generic_terms)
            ][:4]  # M√°ximo 4 keywords
            
            if relevant_keywords:
                final_query = ', '.join(relevant_keywords)
                logger.info(f"‚úÖ LLM-generated search query: '{final_query}'")
                return final_query
        
        logger.warning(f"‚ö†Ô∏è LLM query no v√°lida, usando fallback para: {message[:30]}...")
        return _fallback_query_extraction(message, step_title)
        
    except Exception as e:
        logger.error(f"‚ùå Error en extracci√≥n LLM de query: {str(e)}")
        return _fallback_query_extraction(message, step_title)

def _fallback_query_extraction(message: str, step_title: str) -> str:
    """
    M√©todo de respaldo heur√≠stico para extracci√≥n de query cuando LLM no est√° disponible
    """
    try:
        # Remover palabras comunes y conectores  
        stop_words = ['el', 'la', 'los', 'las', 'un', 'una', 'de', 'del', 'en', 'con', 'por', 'para', 'sobre', 'crear', 'buscar', 'dame', 'necesito', 'quiero', 'hacer']
        
        # Usar el mensaje original como base
        words = [word for word in message.lower().split() if word not in stop_words and len(word) > 2]
        
        # Agregar a√±o actual para b√∫squedas m√°s actualizadas
        current_year = "2025"
        if current_year not in ' '.join(words):
            words.append(current_year)
        
        # Tomar las primeras 4 palabras m√°s relevantes
        query = ' '.join(words[:4])
        
        # Si la query est√° vac√≠a, usar el t√≠tulo del paso
        if not query.strip():
            query = step_title.replace('B√∫squeda de', '').replace('informaci√≥n', '').strip()
            
        # Fallback final
        if not query.strip():
            # Extraer sustantivos y t√©rminos t√©cnicos del mensaje original
            import re
            technical_terms = re.findall(r'\b[A-Za-z]{4,}\b', message)
            if technical_terms:
                query = ' '.join(technical_terms[:3])
            else:
                query = message[:30]  # √öltimo recurso
        
        logger.info(f"üîÑ Fallback search query: '{query}'")
        return query
        
    except Exception:
        return message[:50]  # Fallback seguro

def generate_dynamic_plan_with_ai(message: str, task_id: str) -> dict:
    """
    Genera un plan din√°mico usando Ollama con robustecimiento y validaci√≥n de esquemas
    Mejora implementada seg√∫n UPGRADE.md Secci√≥n 2: Generaci√≥n de Plan y Robustez
    """
    logger.info(f"üß† Generating AI-powered dynamic plan for task {task_id} - Message: {message[:50]}...")
    
    ollama_service = get_ollama_service()
    if not ollama_service or not ollama_service.is_healthy():
        logger.warning(f"‚ö†Ô∏è Ollama not available for task {task_id}, using fallback plan")
        return generate_fallback_plan_with_notification(message, task_id, "Ollama no disponible")
    
    def validate_plan_schema(plan_data: dict) -> bool:
        """Validar que el plan cumple con el esquema esperado"""
        try:
            jsonschema.validate(plan_data, PLAN_SCHEMA)
            logger.info(f"‚úÖ Plan schema validation successful for task {task_id}")
            return True
        except jsonschema.ValidationError as e:
            logger.warning(f"‚ùå Plan schema validation failed for task {task_id}: {e.message}")
            return False
    
    def generate_plan_with_retries() -> dict:
        """Generar plan con reintentos y retroalimentaci√≥n espec√≠fica a Ollama"""
        max_attempts = 3
        last_error = None
        
        for attempt in range(1, max_attempts + 1):
            try:
                logger.info(f"üîÑ Plan generation attempt {attempt}/{max_attempts} for task {task_id}")
                
                # Construir prompt espec√≠fico para generaci√≥n de JSON estructurado
                if attempt == 1:
                    # Primera tentativa: prompt normal
                    prompt = f"""
GENERA UN PLAN DE ACCI√ìN ESTRUCTURADO para esta tarea: "{message}"

Responde √öNICAMENTE con un objeto JSON v√°lido siguiendo EXACTAMENTE este formato:

{{
  "steps": [
    {{
      "title": "T√≠tulo espec√≠fico del paso (5-100 caracteres)",
      "description": "Descripci√≥n detallada del paso (10-300 caracteres)",
      "tool": "web_search|analysis|creation|planning|delivery|processing|synthesis|search_definition|data_analysis",
      "estimated_time": "Tiempo estimado como string",
      "priority": "alta|media|baja"
    }}
  ],
  "task_type": "Tipo de tarea espec√≠fico (m√≠nimo 3 caracteres)",
  "complexity": "baja|media|alta",
  "estimated_total_time": "Tiempo total estimado"
}}

IMPORTANTE:
- M√≠nimo 1 paso, m√°ximo 10 pasos
- Usar solo las herramientas listadas en "tool"
- T√≠tulos y descripciones espec√≠ficas para la tarea, NO gen√©ricas
- NO agregues texto adicional, solo el JSON
- Aseg√∫rate de que sea JSON v√°lido
"""
                elif attempt == 2:
                    # Segunda tentativa: prompt con correcci√≥n espec√≠fica
                    prompt = f"""
El JSON anterior tuvo errores. CORRIGE y genera un plan v√°lido para: "{message}"

ERROR PREVIO: {last_error}

Responde SOLO con JSON v√°lido:
{{
  "steps": [
    {{
      "title": "string de 5-100 caracteres",
      "description": "string de 10-300 caracteres", 
      "tool": "web_search",
      "estimated_time": "string",
      "priority": "media"
    }}
  ],
  "task_type": "string de m√≠nimo 3 caracteres",
  "complexity": "media",
  "estimated_total_time": "string"
}}

SOLO JSON, sin explicaciones adicionales.
"""
                else:
                    # Tercera tentativa: prompt simplificado
                    prompt = f"""
Genera SOLO este JSON v√°lido para: "{message}"

{{"steps":[{{"title":"Completar solicitud","description":"Procesar y completar la solicitud del usuario","tool":"processing","estimated_time":"2 minutos","priority":"media"}}],"task_type":"procesamiento_general","complexity":"media","estimated_total_time":"2 minutos"}}

Pero personal√≠zalo para la tarea espec√≠fica. SOLO JSON.
"""
                
                # Llamar a Ollama con par√°metros optimizados para JSON
                response = ollama_service.generate_response(prompt, {
                    'temperature': 0.2,  # Baja para mayor consistencia
                    'max_tokens': 1000,
                    'response_format': 'json'
                })
                
                if response.get('error'):
                    last_error = response['error']
                    logger.warning(f"‚ö†Ô∏è Ollama error attempt {attempt}: {response['error']}")
                    continue
                
                # Parsear respuesta JSON con m√∫ltiples estrategias
                response_text = response.get('response', '').strip()
                logger.info(f"üì• Ollama response attempt {attempt} for task {task_id}: {response_text[:200]}...")
                
                plan_data = None
                
                # Estrategia 1: JSON limpio directo
                try:
                    cleaned_response = response_text.replace('```json', '').replace('```', '').strip()
                    if cleaned_response.startswith('{') and cleaned_response.endswith('}'):
                        plan_data = json.loads(cleaned_response)
                except json.JSONDecodeError as e:
                    logger.debug(f"üìù JSON parsing strategy 1 failed: {str(e)}")
                
                # Estrategia 2: Buscar JSON en el texto
                if not plan_data:
                    try:
                        json_match = re.search(r'\{[^}]*"steps"[^}]*\[.*?\][^}]*\}', response_text, re.DOTALL)
                        if json_match:
                            plan_data = json.loads(json_match.group())
                    except json.JSONDecodeError as e:
                        logger.debug(f"üìù JSON parsing strategy 2 failed: {str(e)}")
                
                # Estrategia 3: JSON con correcci√≥n de formato com√∫n
                if not plan_data:
                    try:
                        # Corregir comillas simples por dobles
                        corrected_text = response_text.replace("'", '"')
                        # Remover caracteres no JSON
                        corrected_text = re.sub(r'^[^{]*', '', corrected_text)
                        corrected_text = re.sub(r'[^}]*$', '', corrected_text)
                        plan_data = json.loads(corrected_text)
                    except (json.JSONDecodeError, Exception) as e:
                        logger.debug(f"üìù JSON parsing strategy 3 failed: {str(e)}")
                
                if not plan_data:
                    last_error = f"No se pudo parsear JSON v√°lido. Respuesta: {response_text[:100]}..."
                    logger.warning(f"‚ùå Failed to parse JSON on attempt {attempt}: {last_error}")
                    continue
                
                # Validar esquema
                if not validate_plan_schema(plan_data):
                    last_error = "El JSON no cumple con el esquema requerido"
                    logger.warning(f"‚ùå Schema validation failed on attempt {attempt}")
                    continue
                
                # Validar que el plan tenga la estructura esperada
                if not isinstance(plan_data.get('steps'), list) or len(plan_data.get('steps', [])) == 0:
                    last_error = "El plan no contiene pasos v√°lidos"
                    logger.warning(f"‚ùå Invalid plan structure on attempt {attempt}")
                    continue
                
                logger.info(f"‚úÖ Successfully generated and validated plan for task {task_id} on attempt {attempt}")
                return plan_data
                
            except Exception as e:
                last_error = f"Error inesperado: {str(e)}"
                logger.error(f"‚ùå Unexpected error on attempt {attempt} for task {task_id}: {str(e)}")
                continue
        
        # Si llegamos aqu√≠, todos los reintentos fallaron
        logger.error(f"‚ùå All {max_attempts} plan generation attempts failed for task {task_id}")
        raise Exception(f"Failed to generate valid plan after {max_attempts} attempts. Last error: {last_error}")
    
    try:
        # Intentar generar plan con reintentos
        plan_data = generate_plan_with_retries()
        
        # Convertir a formato frontend
        plan_steps = []
        for i, step in enumerate(plan_data.get('steps', [])):
            if not isinstance(step, dict):
                logger.warning(f"‚ö†Ô∏è Invalid step format for task {task_id}, step {i}: {step}")
                continue
                
            plan_steps.append({
                'id': f"step_{i+1}",
                'title': step.get('title', f'Paso {i+1}').strip(),
                'description': step.get('description', 'Procesando...').strip(),
                'tool': step.get('tool', 'processing'),
                'status': 'pending',
                'estimated_time': step.get('estimated_time', '1 minuto'),
                'completed': False,
                'active': i == 0,  # Solo el primer paso activo
                'priority': step.get('priority', 'media')
            })
        
        if len(plan_steps) == 0:
            logger.error(f"‚ùå No valid steps created for task {task_id}")
            return generate_fallback_plan_with_notification(message, task_id, "No se pudieron crear pasos v√°lidos")
            
        # Guardar plan con TaskManager (persistencia MongoDB)
        task_data = {
            'plan': plan_steps,
            'current_step': 0,
            'status': 'plan_generated',  # ‚úÖ MEJORA: Estado inicial correcto
            'created_at': datetime.now().isoformat(),
            'start_time': datetime.now(),
            'message': message,
            'task_type': plan_data.get('task_type', 'general'),
            'complexity': plan_data.get('complexity', 'media'),
            'ai_generated': True,
            'plan_source': 'ai_generated'  # Indicar fuente del plan
        }
        
        # Guardar en persistencia y memoria legacy
        save_task_data(task_id, task_data)
        
        logger.info(f"üéâ Generated AI-powered plan for task {task_id} with {len(plan_steps)} specific steps")
        logger.info(f"üìã Plan steps for task {task_id}: {[step['title'] for step in plan_steps]}")
        
        return {
            'steps': plan_steps,
            'total_steps': len(plan_steps),
            'estimated_total_time': plan_data.get('estimated_total_time', '2-5 minutos'),
            'task_type': plan_data.get('task_type', 'ai_generated_dynamic'),
            'complexity': plan_data.get('complexity', 'media'),
            'ai_generated': True,
            'plan_source': 'ai_generated',  # ‚úÖ MEJORA: Indicar fuente del plan
            'schema_validated': True  # ‚úÖ MEJORA: Indicar que pas√≥ validaci√≥n
        }
            
    except Exception as e:
        logger.error(f"‚ùå All retries failed for AI plan generation task {task_id}: {str(e)}")
        return generate_fallback_plan_with_notification(message, task_id, f"Error en generaci√≥n IA: {str(e)}")

def generate_fallback_plan_with_notification(message: str, task_id: str, error_reason: str = None) -> dict:
    """
    Genera un plan de fallback con notificaci√≥n expl√≠cita al usuario
    Mejora implementada seg√∫n UPGRADE.md Secci√≥n 2: Manejo Expl√≠cito de Fallback
    """
    logger.warning(f"üîÑ Generating fallback plan for task {task_id} - Reason: {error_reason or 'AI not available'}")
    
    fallback_plan = generate_fallback_plan(message, task_id)
    
    # Agregar informaci√≥n de fallback
    fallback_plan['plan_source'] = 'fallback'
    fallback_plan['fallback_reason'] = error_reason or 'AI generation failed'
    fallback_plan['warning'] = 'Plan generado por contingencia - precisi√≥n limitada'
    
    # Marcar en memoria global que es fallback
    if task_id in active_task_plans:
        active_task_plans[task_id]['plan_source'] = 'fallback'
        active_task_plans[task_id]['fallback_reason'] = error_reason
        active_task_plans[task_id]['warning'] = 'Plan generado por contingencia'
    
    return fallback_plan

def generate_fallback_plan(message: str, task_id: str) -> dict:
    """
    Genera un plan de fallback m√°s espec√≠fico cuando la IA no est√° disponible
    """
    try:
        logger.warning(f"üîÑ Generating fallback plan for task {task_id} (AI not available)")
        
        # Analizar el mensaje para determinar el tipo de tarea con m√°s detalle
        message_lower = message.lower()
        original_message = message.strip()
        
        # Extraer palabras clave espec√≠ficas para personalizaci√≥n
        keywords = [word for word in message_lower.split() if len(word) > 3]
        
        # Patrones m√°s espec√≠ficos para diferentes tipos de tareas
        if any(word in message_lower for word in ['crear', 'generar', 'escribir', 'desarrollar', 'dise√±ar', 'construir', 'hacer', 'elaborar']):
            # Extraer el objeto de la creaci√≥n de forma m√°s inteligente
            task_subject = original_message
            for word in ['crear', 'generar', 'escribir', 'desarrollar', 'dise√±ar', 'construir', 'hacer', 'elaborar', 'un', 'una', 'el', 'la']:
                task_subject = task_subject.replace(word, '').replace(word.capitalize(), '')
            task_subject = task_subject.strip()
            
            if not task_subject:
                task_subject = "contenido solicitado"
            
            plan_steps = [
                {
                    'id': 'step_1',
                    'title': f'An√°lisis detallado: {task_subject}',
                    'description': f'Analizar requisitos espec√≠ficos, contexto y objetivos para {task_subject}',
                    'tool': 'analysis',
                    'status': 'pending',
                    'estimated_time': '45 segundos',
                    'completed': False,
                    'active': True
                },
                {
                    'id': 'step_2',
                    'title': f'Estructuraci√≥n y dise√±o',
                    'description': f'Definir estructura, formato y metodolog√≠a para {task_subject}',
                    'tool': 'planning',
                    'status': 'pending',
                    'estimated_time': '1 minuto',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_3',
                    'title': f'Desarrollo y creaci√≥n',
                    'description': f'Ejecutar la creaci√≥n completa de {task_subject} siguiendo los requisitos identificados',
                    'tool': 'creation',
                    'status': 'pending',
                    'estimated_time': '2-3 minutos',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_4',
                    'title': f'Revisi√≥n y optimizaci√≥n final',
                    'description': f'Revisar calidad, completitud y entregar {task_subject} finalizado',
                    'tool': 'delivery',
                    'status': 'pending',
                    'estimated_time': '30 segundos',
                    'completed': False,
                    'active': False
                }
            ]
            
        elif any(word in message_lower for word in ['buscar', 'investigar', 'analizar', 'estudiar', 'revisar', 'informaci√≥n', 'datos', 'investigaci√≥n']):
            # Extraer tema de investigaci√≥n de forma m√°s inteligente
            research_topic = original_message
            for word in ['buscar', 'investigar', 'analizar', 'estudiar', 'revisar', 'informaci√≥n', 'sobre', 'acerca', 'de', 'datos', 'dame', 'necesito']:
                research_topic = research_topic.replace(word, '').replace(word.capitalize(), '')
            research_topic = research_topic.strip()
            
            if not research_topic:
                research_topic = "tema solicitado"
                
            plan_steps = [
                {
                    'id': 'step_1',
                    'title': f'Estrategia de investigaci√≥n: {research_topic}',
                    'description': f'Definir metodolog√≠a, fuentes y alcance de investigaci√≥n para {research_topic}',
                    'tool': 'search_definition',
                    'status': 'pending',
                    'estimated_time': '30 segundos',
                    'completed': False,
                    'active': True
                },
                {
                    'id': 'step_2',
                    'title': f'Recopilaci√≥n de informaci√≥n especializada',
                    'description': f'Buscar informaci√≥n actualizada y relevante sobre {research_topic} en m√∫ltiples fuentes',
                    'tool': 'web_search',
                    'status': 'pending',
                    'estimated_time': '1-2 minutos',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_3',
                    'title': f'An√°lisis y procesamiento de datos',
                    'description': f'Analizar, filtrar y procesar la informaci√≥n recopilada sobre {research_topic}',
                    'tool': 'data_analysis',
                    'status': 'pending',
                    'estimated_time': '1 minuto',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_4',
                    'title': f'S√≠ntesis y presentaci√≥n de hallazgos',
                    'description': f'Sintetizar resultados y presentar conclusiones sobre {research_topic}',
                    'tool': 'synthesis',
                    'status': 'pending',
                    'estimated_time': '45 segundos',
                    'completed': False,
                    'active': False
                }
            ]
            
        elif any(word in message_lower for word in ['explica', 'define', 'qu√© es', 'c√≥mo', 'por qu√©', 'cu√°l']):
            # Preguntas explicativas
            topic = original_message.replace('?', '').strip()
            
            plan_steps = [
                {
                    'id': 'step_1',
                    'title': f'Investigaci√≥n conceptual: {topic}',
                    'description': f'Buscar definiciones, conceptos clave y contexto para responder: {topic}',
                    'tool': 'web_search',
                    'status': 'pending',
                    'estimated_time': '1 minuto',
                    'completed': False,
                    'active': True
                },
                {
                    'id': 'step_2',
                    'title': f'An√°lisis y estructuraci√≥n',
                    'description': f'Analizar informaci√≥n encontrada y estructurar respuesta comprensible',
                    'tool': 'analysis',
                    'status': 'pending',
                    'estimated_time': '45 segundos',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_3',
                    'title': f'Formulaci√≥n de respuesta completa',
                    'description': f'Crear respuesta detallada y educativa para: {topic}',
                    'tool': 'synthesis',
                    'status': 'pending',
                    'estimated_time': '30 segundos',
                    'completed': False,
                    'active': False
                }
            ]
            
        else:
            # Plan adaptativo para tareas no clasificadas
            plan_steps = [
                {
                    'id': 'step_1',
                    'title': f'Interpretaci√≥n de solicitud: "{original_message[:30]}..."',
                    'description': f'Analizar y comprender los requisitos espec√≠ficos de: {original_message}',
                    'tool': 'analysis',
                    'status': 'pending',
                    'estimated_time': '30 segundos',
                    'completed': False,
                    'active': True
                },
                {
                    'id': 'step_2',
                    'title': f'Planificaci√≥n de ejecuci√≥n',
                    'description': f'Definir metodolog√≠a y pasos para cumplir con: {original_message}',
                    'tool': 'planning',
                    'status': 'pending',
                    'estimated_time': '45 segundos',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_3',
                    'title': f'Procesamiento y ejecuci√≥n',
                    'description': f'Ejecutar y procesar seg√∫n los requisitos identificados',
                    'tool': 'processing',
                    'status': 'pending',
                    'estimated_time': '1-2 minutos',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_4',
                    'title': f'Entrega de resultados finales',
                    'description': f'Entregar resultado completo que satisfaga: {original_message}',
                    'tool': 'delivery',
                    'status': 'pending',
                    'estimated_time': '30 segundos',
                    'completed': False,
                    'active': False
                }
            ]
        
        # Guardar plan en memoria global con timestamp
        active_task_plans[task_id] = {
            'plan': plan_steps,
            'current_step': 0,
            'status': 'executing',
            'created_at': datetime.now().isoformat(),
            'start_time': datetime.now(),
            'message': message,
            'ai_generated': False  # Marcar como plan de fallback
        }
        
        logger.info(f"üìã Generated fallback plan for task {task_id} with {len(plan_steps)} customized steps")
        
        return {
            'steps': plan_steps,
            'total_steps': len(plan_steps),
            'estimated_total_time': '2-4 minutos',
            'task_type': 'adaptive_fallback_plan',
            'ai_generated': False
        }
        
    except Exception as e:
        logger.error(f"Error generating structured plan: {str(e)}")
        # Plan de fallback simple
        fallback_plan = [
            {
                'id': 'step_1',
                'title': 'Procesando solicitud',
                'description': 'Procesando tu solicitud...',
                'tool': 'processing',
                'status': 'pending',
                'estimated_time': '1 minuto',
                'completed': False,
                'active': True
            }
        ]
        
        active_task_plans[task_id] = {
            'plan': fallback_plan,
            'current_step': 0,
            'status': 'executing',
            'created_at': datetime.now().isoformat(),
            'message': message
        }
        
        return {
            'steps': fallback_plan,
            'total_steps': 1,
            'estimated_total_time': '1 minuto',
            'task_type': 'simple_execution'
        }



def generate_clean_response(ollama_response: str, tool_results: list, task_status: str = "success", 
                          failed_step_title: str = None, error_message: str = None) -> str:
    """
    Genera una respuesta final condicional y din√°mica basada en el estado real de la tarea
    Incluye informaci√≥n sobre archivos tangibles generados.
    
    Args:
        ollama_response: Respuesta original de Ollama
        tool_results: Resultados de herramientas ejecutadas
        task_status: Estado final de la tarea ('success', 'completed_with_warnings', 'failed')
        failed_step_title: T√≠tulo del paso que fall√≥ (si aplica)
        error_message: Mensaje de error espec√≠fico (si aplica)
    
    Returns:
        str: Respuesta final apropiada para el estado de la tarea con informaci√≥n de archivos
    """
    try:
        # Detectar archivos creados en los resultados
        files_created = []
        deliverables_info = []
        
        for result in tool_results or []:
            if isinstance(result, dict):
                if result.get('file_created') and result.get('file_name'):
                    files_created.append({
                        'name': result['file_name'],
                        'size': result.get('file_size', 0),
                        'download_url': result.get('download_url', ''),
                        'type': result.get('type', 'unknown')
                    })
                    
                if result.get('tangible_result') or result.get('final_deliverable'):
                    deliverables_info.append(result)
        
        # Respuesta basada en el estado real de la tarea
        if task_status == "completed_success":
            # Tarea completada exitosamente
            if files_created:
                clean_response = f"""üéâ ¬°Excelente! He completado tu solicitud con √©xito y he generado {len(files_created)} archivo(s) tangible(s).

üìÅ **ARCHIVOS GENERADOS:**
"""
                for file_info in files_created:
                    clean_response += f"‚Ä¢ **{file_info['name']}** ({file_info['size']} bytes) - Listo para descargar\n"
                
                clean_response += """
‚úÖ He ejecutado todos los pasos del plan de acci√≥n que puedes ver en el panel lateral. La tarea se ha finalizado correctamente y todos los objetivos han sido alcanzados.

üîÑ **C√≥mo acceder a tus archivos:**
- Revisa el panel de progreso para enlaces de descarga
- Los archivos est√°n disponibles inmediatamente
- Puedes descargar cada archivo individualmente

üìä Puedes revisar los detalles completos de la ejecuci√≥n en el monitor de progreso."""
            else:
                clean_response = """¬°Excelente! He completado tu solicitud con √©xito. 

He ejecutado todos los pasos del plan de acci√≥n que puedes ver en el panel lateral. La tarea se ha finalizado correctamente y todos los objetivos han sido alcanzados.

Puedes revisar los detalles completos de la ejecuci√≥n en el monitor de progreso."""

        elif task_status == "completed_with_warnings":
            # Tarea completada con algunas advertencias
            if files_created:
                clean_response = f"""‚úÖ He completado tu solicitud con {len(files_created)} archivo(s) generado(s), aunque con algunas advertencias menores.

üìÅ **ARCHIVOS GENERADOS:**
"""
                for file_info in files_created:
                    clean_response += f"‚Ä¢ **{file_info['name']}** ({file_info['size']} bytes)\n"
                
                clean_response += """
‚ö†Ô∏è El plan de acci√≥n se ejecut√≥ correctamente en general, pero algunos pasos secundarios tuvieron limitaciones. El resultado principal fue alcanzado exitosamente.

Puedes revisar los detalles y advertencias espec√≠ficas en el monitor de ejecuci√≥n para m√°s informaci√≥n."""
            else:
                clean_response = """He completado tu solicitud, aunque con algunas advertencias menores.

El plan de acci√≥n se ejecut√≥ correctamente en general, pero algunos pasos secundarios tuvieron limitaciones. El resultado principal fue alcanzado exitosamente.

Puedes revisar los detalles y advertencias espec√≠ficas en el monitor de ejecuci√≥n para m√°s informaci√≥n."""

        elif task_status == "failed":
            # Tarea fall√≥
            failed_step_info = f" en el paso '{failed_step_title}'" if failed_step_title else ""
            error_info = f": {error_message}" if error_message else ""
            
            if files_created:
                clean_response = f"""‚ùå Lo siento, no pude completar totalmente tu solicitud debido a un error{failed_step_info}{error_info}.

Sin embargo, logr√© generar {len(files_created)} archivo(s) parcial(es):

üìÅ **ARCHIVOS PARCIALES GENERADOS:**
"""
                for file_info in files_created:
                    clean_response += f"‚Ä¢ **{file_info['name']}** ({file_info['size']} bytes)\n"
                
                clean_response += """
üîÑ He intentado ejecutar el plan de acci√≥n completo, pero encontr√© dificultades t√©cnicas. Los archivos parciales pueden contener informaci√≥n √∫til.

Por favor, revisa el monitor de ejecuci√≥n para m√°s detalles sobre el problema, o intenta reformular tu solicitud de manera diferente."""
            else:
                clean_response = f"""Lo siento, no pude completar tu solicitud debido a un error{failed_step_info}{error_info}.

He intentado ejecutar el plan de acci√≥n que puedes ver en el panel lateral, pero encontr√© dificultades t√©cnicas que impidieron la finalizaci√≥n.

Por favor, revisa el monitor de ejecuci√≥n para m√°s detalles sobre el problema, o intenta reformular tu solicitud de manera diferente."""

        else:
            # Estado por defecto (en progreso o desconocido)
            clean_response = """Perfecto, he recibido tu solicitud y ya estoy trabajando en ella. 

He generado un plan de acci√≥n detallado que puedes ver en la secci√≥n "Plan de Acci√≥n" del panel lateral. El plan incluye varios pasos que ejecutar√© autom√°ticamente para completar tu tarea.

üìã **Mi proceso incluir√°:**
- An√°lisis de tu solicitud
- Generaci√≥n de contenido espec√≠fico
- Creaci√≥n de archivos tangibles (cuando aplique)
- Entrega de resultados finales

üîÑ Mientras trabajo en tu solicitud, puedes seguir el progreso en tiempo real a trav√©s del panel de monitoreo. Los archivos generados aparecer√°n autom√°ticamente cuando est√©n listos."""

        # Agregar informaci√≥n sobre herramientas si est√°n disponibles
        if tool_results and task_status in ["completed_success", "completed_with_warnings"]:
            tools_summary = []
            successful_tools = 0
            failed_tools = 0
            
            for result in tool_results:
                if result.get('error'):
                    failed_tools += 1
                else:
                    successful_tools += 1
                    # Agregar informaci√≥n √∫til del resultado si est√° disponible
                    if isinstance(result.get('result'), dict):
                        if 'output' in result['result']:
                            tools_summary.append(f"‚úÖ {result['tool']}: Completado exitosamente")
            
            # Agregar resumen de herramientas al final
            if successful_tools > 0 or failed_tools > 0:
                clean_response += f"\n\n---\n**üîß Resumen de Ejecuci√≥n:** {successful_tools} herramientas exitosas"
                if failed_tools > 0:
                    clean_response += f", {failed_tools} con errores"
                if files_created:
                    clean_response += f", {len(files_created)} archivo(s) generado(s)"
                clean_response += "\n"
                
                # Agregar detalles de herramientas exitosas (m√°ximo 3)
                for summary in tools_summary[:3]:
                    clean_response += f"{summary}\n"
        
        elif tool_results and task_status == "failed":
            # Para tareas fallidas, mostrar qu√© herramientas se intentaron
            attempted_tools = [result.get('tool', 'Desconocida') for result in tool_results]
            if attempted_tools:
                clean_response += f"\n\n**üîß Herramientas intentadas:** {', '.join(attempted_tools[:3])}"
        
        return clean_response
        
    except Exception as e:
        logger.error(f"‚ùå Error generating conditional clean response: {str(e)}")
        # Fallback seguro con informaci√≥n del error
        fallback_response = """He recibido tu solicitud y estoy trabajando en ella. 

Puedes ver el progreso del plan de acci√≥n en el panel lateral derecho. El plan se ejecutar√° autom√°ticamente paso a paso."""
        
        if task_status == "failed" and error_message:
            fallback_response += f"\n\n‚ö†Ô∏è Nota: Se encontr√≥ un problema t√©cnico - {error_message}"
        
        return fallback_response

@agent_bp.route('/chat', methods=['POST'])
def chat():
    """
    Endpoint principal del chat - VERSI√ìN REAL CON OLLAMA
    Distingue entre conversaciones casuales y tareas complejas
    GENERA PLAN ESTRUCTURADO PARA MOSTRAR EN PLAN DE ACCI√ìN
    """
    try:
        data = request.get_json()
        message = data.get('message', '')
        context = data.get('context', {})
        
        if not message:
            return jsonify({'error': 'Message is required'}), 400
        
        # Obtener task_id del contexto
        task_id = context.get('task_id', str(uuid.uuid4()))
        
        logger.info(f"üöÄ Processing message: {message[:50]}... (ID: {task_id})")
        
        # Obtener servicio de Ollama
        ollama_service = get_ollama_service()
        if not ollama_service:
            return jsonify({
                'error': 'Ollama service not available',
                'response': 'Lo siento, el servicio de IA no est√° disponible en este momento.'
            }), 503
        
        # PASO 1: Detectar si es conversaci√≥n casual o tarea compleja
        is_casual = is_casual_conversation(message)
        
        if is_casual:
            # MODO CONVERSACI√ìN CASUAL
            logger.info(f"üó£Ô∏è Detected casual conversation mode")
            
            # Usar solo Ollama para respuesta casual
            ollama_response = ollama_service.generate_casual_response(message, context)
            
            if ollama_response.get('error'):
                return jsonify({
                    'error': ollama_response['error'],
                    'response': ollama_response['response']
                }), 500
            
            return jsonify({
                'response': ollama_response['response'],
                'task_id': task_id,
                'timestamp': datetime.now().isoformat(),
                'execution_status': 'completed',
                'mode': 'casual_conversation',
                'memory_used': True
            })
        
        else:
            # MODO AGENTE CON PLANIFICACI√ìN ESTRUCTURADA
            logger.info(f"ü§ñ Detected task mode - generating structured plan")
            
            # PASO 2: Generar plan din√°mico PRIMERO usando IA
            structured_plan = generate_dynamic_plan_with_ai(message, task_id)
            
            # PASO 3: Generar respuesta usando Ollama con contexto de herramientas
            ollama_response = ollama_service.generate_response(message, context, use_tools=True)
            
            if ollama_response.get('error'):
                return jsonify({
                    'error': ollama_response['error'],
                    'response': ollama_response['response']
                }), 500
            
            # PASO 4: Procesar tool_calls si existen
            tool_results = []
            if ollama_response.get('tool_calls'):
                logger.info(f"üîß Processing {len(ollama_response['tool_calls'])} tool calls")
                tool_manager = get_tool_manager()
                
                if tool_manager:
                    for tool_call in ollama_response['tool_calls']:
                        try:
                            tool_name = tool_call.get('tool')
                            parameters = tool_call.get('parameters', {})
                            
                            logger.info(f"üîß Executing tool: {tool_name}")
                            
                            # Ejecutar herramienta real
                            tool_result = tool_manager.execute_tool(tool_name, parameters)
                            tool_results.append({
                                'tool': tool_name,
                                'parameters': parameters,
                                'result': tool_result
                            })
                            
                        except Exception as e:
                            logger.error(f"Error executing tool {tool_name}: {str(e)}")
                            tool_results.append({
                                'tool': tool_name,
                                'parameters': parameters,
                                'error': str(e)
                            })
            
            # PASO 5: Generar respuesta LIMPIA basada en estado inicial (tarea comenzando)
            final_response = generate_clean_response(ollama_response['response'], tool_results, 
                                                    task_status="starting", 
                                                    failed_step_title=None, 
                                                    error_message=None)
            
            # PASO 6: Ejecutar plan autom√°ticamente
            execute_plan_with_real_tools(task_id, structured_plan['steps'], message)
            
            logger.info(f"‚úÖ Task completed successfully with structured plan")
            
            return jsonify({
                'response': final_response,
                'task_id': task_id,
                'plan': structured_plan,  # PLAN ESTRUCTURADO PARA FRONTEND
                'tool_calls': ollama_response.get('tool_calls', []),
                'tool_results': tool_results,
                'timestamp': datetime.now().isoformat(),
                'execution_status': 'plan_generated',  # ‚úÖ MEJORA: Estado inicial correcto
                'mode': 'agent_with_structured_plan',
                'memory_used': True
            })
    
    except Exception as e:
        logger.error(f"Error general en chat: {str(e)}")
        return jsonify({
            'error': f'Error interno del servidor: {str(e)}',
            'response': 'Lo siento, hubo un error procesando tu solicitud.'
        }), 500

@agent_bp.route('/test-plan-generation', methods=['POST'])
def test_plan_generation():
    """
    Endpoint para probar la generaci√≥n de planes con IA
    """
    try:
        data = request.get_json() or {}
        message = data.get('message', 'Crear un informe completo sobre inteligencia artificial en 2024')
        task_id = data.get('task_id', f'test-{uuid.uuid4()}')
        
        logger.info(f"üß™ Testing AI plan generation for: {message}")
        
        # Probar generaci√≥n con IA
        ai_plan = generate_dynamic_plan_with_ai(message, task_id)
        
        # Tambi√©n generar plan de fallback para comparaci√≥n
        fallback_task_id = f'fallback-{uuid.uuid4()}'
        fallback_plan = generate_fallback_plan(message, fallback_task_id)
        
        return jsonify({
            'test_results': {
                'ai_plan': {
                    'plan': ai_plan,
                    'ai_generated': ai_plan.get('ai_generated', False),
                    'plan_type': ai_plan.get('task_type', 'unknown')
                },
                'fallback_plan': {
                    'plan': fallback_plan,
                    'ai_generated': fallback_plan.get('ai_generated', False),
                    'plan_type': fallback_plan.get('task_type', 'unknown')
                }
            },
            'test_message': message,
            'timestamp': datetime.now().isoformat(),
            'comparison': {
                'ai_steps': len(ai_plan.get('steps', [])),
                'fallback_steps': len(fallback_plan.get('steps', [])),
                'ai_working': len(ai_plan.get('steps', [])) > 0,
                'plans_different': ai_plan.get('steps', []) != fallback_plan.get('steps', [])
            }
        })
    
    except Exception as e:
        logger.error(f"‚ùå Error in plan generation test: {str(e)}")
        return jsonify({
            'error': f'Error testing plan generation: {str(e)}',
            'test_failed': True
        }), 500

@agent_bp.route('/download/<filename>', methods=['GET'])
def download_file(filename):
    """
    Endpoint para descargar archivos generados por el agente
    """
    try:
        import os
        from flask import send_file, abort
        
        # Validar nombre de archivo para seguridad
        if not filename or '..' in filename or '/' in filename:
            abort(400, "Invalid filename")
        
        file_path = f"/app/backend/static/generated_files/{filename}"
        
        # Verificar que el archivo existe
        if not os.path.exists(file_path):
            abort(404, "File not found")
        
        logger.info(f"üì• Downloading file: {filename}")
        
        # Determinar tipo MIME
        import mimetypes
        mimetype = mimetypes.guess_type(filename)[0]
        if not mimetype:
            if filename.endswith('.md'):
                mimetype = 'text/markdown'
            elif filename.endswith('.txt'):
                mimetype = 'text/plain'
            elif filename.endswith('.py'):
                mimetype = 'text/x-python'
            else:
                mimetype = 'application/octet-stream'
        
        return send_file(
            file_path, 
            as_attachment=True, 
            download_name=filename,
            mimetype=mimetype
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error downloading file {filename}: {str(e)}")
        return jsonify({'error': f'Error downloading file: {str(e)}'}), 500

@agent_bp.route('/list-files', methods=['GET'])
def list_generated_files():
    """
    Endpoint para listar archivos generados por el agente
    """
    try:
        import os
        from datetime import datetime
        
        files_dir = "/app/backend/static/generated_files"
        
        if not os.path.exists(files_dir):
            return jsonify({'files': []})
        
        files = []
        for filename in os.listdir(files_dir):
            file_path = os.path.join(files_dir, filename)
            if os.path.isfile(file_path):
                stat = os.stat(file_path)
                files.append({
                    'name': filename,
                    'size': stat.st_size,
                    'created': datetime.fromtimestamp(stat.st_ctime).isoformat(),
                    'modified': datetime.fromtimestamp(stat.st_mtime).isoformat(),
                    'download_url': f'/api/agent/download/{filename}'
                })
        
        # Ordenar por fecha de creaci√≥n (m√°s reciente primero)
        files.sort(key=lambda x: x['created'], reverse=True)
        
        return jsonify({
            'files': files,
            'total_files': len(files),
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error listing files: {str(e)}")
        return jsonify({'error': f'Error listing files: {str(e)}'}), 500

@agent_bp.route('/generate-plan', methods=['POST'])
def generate_plan():
    """
    Genera un plan de acci√≥n din√°mico usando IA mejorada
    """
    try:
        data = request.get_json() or {}
        task_title = data.get('task_title', '')
        task_id = data.get('task_id', str(uuid.uuid4()))
        
        if not task_title:
            return jsonify({'error': 'task_title is required'}), 400
        
        logger.info(f"üöÄ Generating dynamic plan for: {task_title}")
        
        # Usar la nueva funci√≥n de generaci√≥n din√°mica con IA
        dynamic_plan = generate_dynamic_plan_with_ai(task_title, task_id)
        
        logger.info(f"‚úÖ Dynamic plan generated with {len(dynamic_plan['steps'])} steps")
        
        return jsonify({
            'plan': dynamic_plan['steps'],
            'task_id': task_id,
            'total_steps': dynamic_plan['total_steps'],
            'estimated_total_time': dynamic_plan['estimated_total_time'],
            'task_type': dynamic_plan['task_type'],
            'complexity': dynamic_plan.get('complexity', 'media'),
            'timestamp': datetime.now().isoformat(),
            'status': 'plan_generated',
            'ai_generated': dynamic_plan.get('ai_generated', False)
        })
    
    except Exception as e:
        logger.error(f"Error generating dynamic plan: {str(e)}")
        return jsonify({
            'error': f'Error generando plan: {str(e)}'
        }), 500

@agent_bp.route('/update-task-progress', methods=['POST'])
def update_task_progress():
    """Actualiza el progreso de una tarea"""
    try:
        data = request.get_json() or {}
        task_id = data.get('task_id', '')
        step_id = data.get('step_id', '')
        completed = data.get('completed', False)
        
        if not task_id or not step_id:
            return jsonify({'error': 'task_id and step_id are required'}), 400
        
        # Actualizar progreso en memoria
        if task_id in active_task_plans:
            plan = active_task_plans[task_id]['plan']
            for step in plan:
                if step['id'] == step_id:
                    step['completed'] = completed
                    step['status'] = 'completed' if completed else 'pending'
                    break
            
            # Actualizar plan en memoria
            active_task_plans[task_id]['plan'] = plan
        
        return jsonify({
            'success': True,
            'task_id': task_id,
            'step_id': step_id,
            'completed': completed
        })
        
    except Exception as e:
        logger.error(f"Error updating task progress: {str(e)}")
        return jsonify({
            'error': f'Error actualizando progreso: {str(e)}'
        }), 500

@agent_bp.route('/update-task-time/<task_id>', methods=['POST'])
def update_task_time(task_id):
    """Actualiza el tiempo transcurrido de una tarea en tiempo real"""
    try:
        if task_id in active_task_plans:
            plan_data = active_task_plans[task_id]
            start_time = plan_data.get('start_time')
            
            if start_time:
                # Calcular tiempo transcurrido
                elapsed = datetime.now() - start_time
                elapsed_seconds = int(elapsed.total_seconds())
                
                # Formatear tiempo como MM:SS
                minutes = elapsed_seconds // 60
                seconds = elapsed_seconds % 60
                elapsed_str = f"{minutes}:{seconds:02d}"
                
                # Actualizar el paso activo
                plan = plan_data['plan']
                for step in plan:
                    if step.get('active', False):
                        step['elapsed_time'] = f"{elapsed_str} Pensando"
                        break
                
                # Actualizar en memoria
                active_task_plans[task_id]['plan'] = plan
                
                return jsonify({
                    'success': True,
                    'elapsed_time': elapsed_str,
                    'plan': plan
                })
            
        return jsonify({'error': 'Task not found'}), 404
        
    except Exception as e:
        logger.error(f"Error updating task time: {str(e)}")
        return jsonify({'error': str(e)}), 500

@agent_bp.route('/get-task-plan/<task_id>', methods=['GET'])
def get_task_plan(task_id):
    """Obtiene el plan de una tarea espec√≠fica con progreso actualizado"""
    try:
        if task_id in active_task_plans:
            plan_data = active_task_plans[task_id]
            
            # Calcular progreso
            completed_steps = sum(1 for step in plan_data['plan'] if step['completed'])
            total_steps = len(plan_data['plan'])
            progress_percentage = (completed_steps / total_steps) * 100 if total_steps > 0 else 0
            
            return jsonify({
                'plan': plan_data['plan'],
                'current_step': plan_data['current_step'],
                'status': plan_data['status'],
                'created_at': plan_data['created_at'],
                'progress': progress_percentage,
                'completed_steps': completed_steps,
                'total_steps': total_steps,
                'message': plan_data.get('message', ''),
                'final_result': plan_data.get('final_result'),  # Incluir resultado final
                'updated_at': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'error': 'Task plan not found'
            }), 404
    
    except Exception as e:
        logger.error(f"Error getting task plan: {str(e)}")
        return jsonify({
            'error': f'Error obteniendo plan: {str(e)}'
        }), 500

@agent_bp.route('/get-final-result/<task_id>', methods=['GET'])
def get_final_result(task_id):
    """Obtiene el resultado final de una tarea completada"""
    try:
        if task_id in active_task_plans:
            plan_data = active_task_plans[task_id]
            
            if plan_data['status'] == 'completed' and 'final_result' in plan_data:
                return jsonify({
                    'task_id': task_id,
                    'status': 'completed',
                    'final_result': plan_data['final_result'],
                    'plan_summary': {
                        'total_steps': len(plan_data['plan']),
                        'completed_steps': sum(1 for step in plan_data['plan'] if step['completed']),
                        'task_type': plan_data.get('task_type', 'general'),
                        'complexity': plan_data.get('complexity', 'media')
                    }
                })
            else:
                return jsonify({
                    'task_id': task_id,
                    'status': plan_data['status'],
                    'message': 'Tarea a√∫n no completada o sin resultado final'
                })
        else:
            return jsonify({
                'error': 'Task not found'
            }), 404
    
    except Exception as e:
        logger.error(f"Error getting final result: {str(e)}")
        return jsonify({
            'error': f'Error obteniendo resultado final: {str(e)}'
        }), 500

@agent_bp.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'services': {
            'ollama': True,  # Simplified
            'tools': 12,     # Simplified
            'database': True # Simplified
        }
    })

@agent_bp.route('/status', methods=['GET'])
def agent_status():
    """Status del agente"""
    return jsonify({
        'status': 'running',
        'timestamp': datetime.now().isoformat(),
        'active_tasks': len(active_task_plans),
        'ollama': {
            'connected': True,
            'endpoint': 'https://78d08925604a.ngrok-free.app',
            'model': 'llama3.1:8b'
        },
        'tools': 12,
        'memory': {
            'enabled': True,
            'initialized': True
        }
    })

# Mantener endpoints adicionales necesarios para compatibilidad
@agent_bp.route('/generate-suggestions', methods=['POST'])
def generate_suggestions():
    """Genera sugerencias din√°micas simples"""
    try:
        # Sugerencias est√°ticas simples pero √∫tiles
        suggestions = [
            {
                'title': 'Buscar informaci√≥n sobre IA',
                'description': 'Investigar las √∫ltimas tendencias en inteligencia artificial',
                'type': 'research'
            },
            {
                'title': 'Analizar datos de mercado',
                'description': 'Realizar an√°lisis de tendencias del mercado actual',
                'type': 'analysis'
            },
            {
                'title': 'Crear documento t√©cnico',
                'description': 'Generar documentaci√≥n t√©cnica profesional',
                'type': 'creation'
            }
        ]
        
        return jsonify({
            'suggestions': suggestions,
            'timestamp': datetime.now().isoformat()
        })
    
    except Exception as e:
        logger.error(f"Error generating suggestions: {str(e)}")
        return jsonify({
            'suggestions': [],
            'error': str(e)
        }), 500

# Endpoints de archivos simplificados
@agent_bp.route('/upload-files', methods=['POST'])
def upload_files():
    """Manejo simplificado de archivos"""
    try:
        files = request.files.getlist('files')
        task_id = request.form.get('task_id', str(uuid.uuid4()))
        
        # Procesar archivos de manera simple
        uploaded_files = []
        for file in files:
            if file and file.filename:
                file_id = str(uuid.uuid4())
                uploaded_files.append({
                    'id': file_id,
                    'name': file.filename,
                    'size': len(file.read()),
                    'mime_type': file.mimetype or 'application/octet-stream'
                })
        
        # Guardar referencias en memoria
        if task_id not in task_files:
            task_files[task_id] = []
        task_files[task_id].extend(uploaded_files)
        
        return jsonify({
            'files': uploaded_files,
            'task_id': task_id,
            'message': f'Se subieron {len(uploaded_files)} archivos exitosamente'
        })
    
    except Exception as e:
        logger.error(f"Error uploading files: {str(e)}")
        return jsonify({
            'error': f'Error subiendo archivos: {str(e)}'
        }), 500

@agent_bp.route('/get-task-files/<task_id>', methods=['GET'])
def get_task_files(task_id):
    """Obtiene archivos de una tarea"""
    try:
        files = task_files.get(task_id, [])
        return jsonify({
            'files': files,
            'task_id': task_id,
            'count': len(files)
        })
    
    except Exception as e:
        logger.error(f"Error getting task files: {str(e)}")
        return jsonify({
            'error': f'Error obteniendo archivos: {str(e)}'
        }), 500

@agent_bp.route('/ollama/check', methods=['POST'])
def check_ollama_connection():
    """Verifica conexi√≥n con Ollama"""
    try:
        data = request.get_json() or {}
        endpoint = data.get('endpoint', 'https://78d08925604a.ngrok-free.app')
        
        # Verificar conexi√≥n real con Ollama
        try:
            import requests
            response = requests.get(f"{endpoint}/api/tags", timeout=10)
            is_connected = response.status_code == 200
        except:
            is_connected = False
        
        return jsonify({
            'is_connected': is_connected,
            'endpoint': endpoint,
            'status': 'healthy' if is_connected else 'disconnected'
        })
    
    except Exception as e:
        logger.error(f"Error checking Ollama connection: {str(e)}")
        return jsonify({
            'is_connected': False,
            'error': str(e)
        }), 500

@agent_bp.route('/ollama/models', methods=['POST'])
def get_ollama_models():
    """Obtiene modelos disponibles de Ollama"""
    try:
        data = request.get_json() or {}
        endpoint = data.get('endpoint', 'https://78d08925604a.ngrok-free.app')
        
        # Simular modelos disponibles
        models = [
            {'name': 'llama3.1:8b', 'size': '4.7GB'},
            {'name': 'deepseek-r1:32b', 'size': '20GB'},
            {'name': 'qwen3:32b', 'size': '18GB'}
        ]
        
        return jsonify({
            'models': models,
            'endpoint': endpoint,
            'count': len(models)
        })
    
    except Exception as e:
        logger.error(f"Error getting Ollama models: {str(e)}")
        return jsonify({
            'models': [],
            'error': str(e)
        }), 500