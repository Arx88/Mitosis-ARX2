"""
Rutas API del agente - Versi√≥n REAL CON OLLAMA
Sistema de agente que usa Ollama real para generar respuestas inteligentes
Y distingue entre conversaciones casuales y tareas complejas
"""

from flask import Blueprint, request, jsonify, current_app
from datetime import datetime
import logging
import time
import uuid
import json
import os
import requests
import re

logger = logging.getLogger(__name__)

agent_bp = Blueprint('agent', __name__)

# Almacenamiento temporal para compartir conversaciones
shared_conversations = {}
# Almacenamiento temporal para archivos por tarea
task_files = {}
# Almacenamiento global para planes de tareas
active_task_plans = {}

# Patrones para detectar tipo de mensaje
CASUAL_PATTERNS = [
    r'^hola\b',
    r'^¬ø?c√≥mo est√°s\??$',
    r'^¬ø?qu√© tal\??$',
    r'^buenos d√≠as\b',
    r'^buenas tardes\b',
    r'^buenas noches\b',
    r'^¬ø?c√≥mo te llamas\??$',
    r'^¬ø?qui√©n eres\??$',
    r'^gracias\b',
    r'^de nada\b',
    r'^adi√≥s\b',
    r'^hasta luego\b',
    r'^ok\b',
    r'^vale\b',
    r'^perfecto\b',
    r'^entiendo\b'
]

TASK_PATTERNS = [
    r'crear\b.*\b(informe|reporte|documento|an√°lisis|plan|estrategia)',
    r'analizar\b.*\b(datos|informaci√≥n|tendencias|mercado)',
    r'buscar\b.*\b(informaci√≥n|datos|sobre)',
    r'investigar\b.*\b(sobre|tendencias|mercado)',
    r'generar\b.*\b(contenido|texto|c√≥digo|script)',
    r'desarrollar\b.*\b(aplicaci√≥n|web|software)',
    r'escribir\b.*\b(c√≥digo|script|programa)',
    r'hacer\b.*\b(an√°lisis|investigaci√≥n|estudio)',
    r'realizar\b.*\b(estudio|investigaci√≥n|an√°lisis)',
    r'dame\b.*\b(informaci√≥n|datos|informe|reporte)',
    r'necesito\b.*\b(informaci√≥n|datos|ayuda con)',
    r'quiero\b.*\b(crear|generar|desarrollar|hacer)',
    r'puedes\b.*\b(crear|generar|buscar|investigar)',
    r'ay√∫dame\b.*\b(con|a crear|a generar|a desarrollar)'
]

def is_casual_conversation(message: str) -> bool:
    """Detecta si un mensaje es una conversaci√≥n casual"""
    message_lower = message.lower().strip()
    
    # Mensajes muy cortos (menos de 3 palabras) probablemente son casuales
    if len(message_lower.split()) <= 3:
        for pattern in CASUAL_PATTERNS:
            if re.search(pattern, message_lower):
                return True
    
    # Verificar patrones de tareas PRIMERO
    for pattern in TASK_PATTERNS:
        if re.search(pattern, message_lower):
            return False
    
    # Verificar palabras clave que indican tarea (m√°s amplio)
    task_keywords = [
        'buscar', 'busca', 'investigar', 'investiga', 'analizar', 'analiza',
        'crear', 'crea', 'generar', 'genera', 'desarrollar', 'desarrolla',
        'hacer', 'haz', 'escribir', 'escribe', 'dame', 'dime', 'necesito',
        'quiero', 'puedes', 'ay√∫dame', 'planificar', 'planifica', 'realizar',
        'informe', 'reporte', 'an√°lisis', 'estudio', 'investigaci√≥n'
    ]
    
    # Si contiene palabras clave de tareas, NO es casual
    for keyword in task_keywords:
        if keyword in message_lower:
            return False
    
    # Si no hay patrones de tareas y es muy corto, probablemente es casual
    if len(message_lower.split()) <= 5:
        return True
    
    # Si tiene m√°s de 5 palabras y no es claramente casual, tratarlo como tarea
    return False

def get_ollama_service():
    """Obtener servicio de Ollama"""
    try:
        service = current_app.ollama_service
        logger.info(f"‚úÖ Ollama service found: {service}")
        return service
    except AttributeError:
        logger.error("‚ùå Ollama service not available")
        return None

def get_tool_manager():
    """Obtener tool manager"""
    try:
        return current_app.tool_manager
    except AttributeError:
        logger.error("Tool manager not available")
        return None

def execute_plan_with_real_tools(task_id: str, plan_steps: list, message: str):
    """
    Ejecuta REALMENTE los pasos del plan usando herramientas y entrega resultados finales
    """
    try:
        import threading
        import time
        
        # Obtener servicios ANTES de crear el hilo
        ollama_service = get_ollama_service()
        tool_manager = get_tool_manager()
        
        def execute_steps():
            if task_id not in active_task_plans:
                return
                
            plan_data = active_task_plans[task_id]
            steps = plan_data['plan']
            final_results = []  # Almacenar resultados de cada paso
            
            logger.info(f"üöÄ Starting REAL execution of {len(steps)} steps for task: {message}")
            
            for i, step in enumerate(steps):
                logger.info(f"üîÑ Executing step {i+1}/{len(steps)}: {step['title']}")
                
                # Marcar paso como activo
                step['active'] = True
                step['status'] = 'in-progress'
                
                # Actualizar plan en memoria
                active_task_plans[task_id]['plan'] = steps
                active_task_plans[task_id]['current_step'] = i + 1
                
                step_result = None
                try:
                    # EJECUTAR HERRAMIENTA REAL seg√∫n el tipo de paso
                    if step['tool'] == 'web_search' or 'b√∫squeda' in step['title'].lower():
                        if tool_manager:
                            search_query = extract_search_query_from_message(message, step['title'])
                            logger.info(f"üîç Executing web search for: {search_query}")
                            
                            result = tool_manager.execute_tool('web_search', {
                                'query': search_query,
                                'num_results': 5
                            }, task_id=task_id)
                            
                            step_result = {
                                'type': 'web_search',
                                'query': search_query,
                                'results': result.get('search_results', []),
                                'summary': f"Encontradas {len(result.get('search_results', []))} fuentes relevantes"
                            }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            logger.info(f"‚úÖ Web search completed: {len(result.get('search_results', []))} results")
                        else:
                            time.sleep(3)
                    
                    elif step['tool'] == 'analysis' or 'an√°lisis' in step['title'].lower():
                        if ollama_service:
                            logger.info(f"üß† Executing analysis using Ollama")
                            
                            # Generar an√°lisis espec√≠fico usando contexto previo
                            analysis_context = f"Tarea: {message}\nPaso actual: {step['title']}\nDescripci√≥n: {step['description']}"
                            if final_results:
                                analysis_context += f"\nResultados previos: {final_results[-1] if final_results else 'Ninguno'}"
                            
                            analysis_prompt = f"""
Realiza un an√°lisis detallado para:
{analysis_context}

Proporciona:
1. An√°lisis espec√≠fico del contexto
2. Hallazgos principales
3. Recomendaciones para pr√≥ximos pasos
4. Conclusiones preliminares

Formato: Respuesta estructurada y profesional.
"""
                            
                            result = ollama_service.generate_response(analysis_prompt, {})
                            
                            step_result = {
                                'type': 'analysis',
                                'content': result.get('response', 'An√°lisis completado'),
                                'summary': 'An√°lisis detallado generado exitosamente'
                            }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            logger.info(f"‚úÖ Analysis completed")
                        else:
                            time.sleep(2)
                    
                    elif step['tool'] == 'creation' or 'creaci√≥n' in step['title'].lower() or 'desarrollo' in step['title'].lower():
                        if ollama_service:
                            logger.info(f"üõ†Ô∏è Executing creation using Ollama")
                            
                            # Generar contenido espec√≠fico
                            creation_context = f"Tarea: {message}\nPaso: {step['title']}\nDescripci√≥n: {step['description']}"
                            if final_results:
                                creation_context += f"\nInformaci√≥n previa: {final_results}"
                            
                            creation_prompt = f"""
Crea el contenido solicitado para:
{creation_context}

Genera contenido espec√≠fico, detallado y profesional que cumpla exactamente con los requisitos de la tarea.

Incluye:
1. Contenido principal solicitado
2. Estructura organizada
3. Informaci√≥n relevante y precisa
4. Formato profesional

Responde con el contenido completo y listo para usar.
"""
                            
                            result = ollama_service.generate_response(creation_prompt, {})
                            
                            step_result = {
                                'type': 'creation',
                                'content': result.get('response', 'Contenido creado'),
                                'summary': 'Contenido creado exitosamente'
                            }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            logger.info(f"‚úÖ Content creation completed")
                        else:
                            time.sleep(4)
                    
                    elif step['tool'] == 'planning' or 'planificaci√≥n' in step['title'].lower():
                        if ollama_service:
                            logger.info(f"üìã Executing planning using Ollama")
                            
                            planning_prompt = f"""
Crea un plan detallado para: {message}

Bas√°ndote en el contexto:
- Tarea: {step['title']}
- Descripci√≥n: {step['description']}
- Informaci√≥n previa: {final_results if final_results else 'Primera fase'}

Genera un plan estructurado con:
1. Objetivos claros
2. Pasos espec√≠ficos
3. Recursos necesarios
4. Cronograma estimado
5. Criterios de √©xito

Proporciona un plan completo y actionable.
"""
                            
                            result = ollama_service.generate_response(planning_prompt, {})
                            
                            step_result = {
                                'type': 'planning',
                                'content': result.get('response', 'Plan generado'),
                                'summary': 'Plan detallado creado exitosamente'
                            }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            logger.info(f"‚úÖ Planning completed")
                        else:
                            time.sleep(2)
                    
                    elif step['tool'] == 'delivery' or 'entrega' in step['title'].lower():
                        if ollama_service:
                            logger.info(f"üì¶ Executing final delivery using Ollama")
                            
                            # Generar entrega final con todos los resultados
                            delivery_prompt = f"""
Prepara la entrega final para la tarea: {message}

Consolida todos los resultados obtenidos:
{final_results}

Crea un documento de entrega final que incluya:
1. RESUMEN EJECUTIVO de lo realizado
2. RESULTADOS PRINCIPALES obtenidos
3. CONTENIDO COMPLETO generado
4. CONCLUSIONES Y RECOMENDACIONES
5. ENTREGABLES FINALES

Formato: Documento profesional completo y estructurado.
"""
                            
                            result = ollama_service.generate_response(delivery_prompt, {})
                            
                            step_result = {
                                'type': 'delivery',
                                'content': result.get('response', 'Entrega completada'),
                                'summary': 'Tarea completada exitosamente con entrega final',
                                'final_deliverable': True
                            }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            logger.info(f"‚úÖ Final delivery completed")
                        else:
                            time.sleep(2)
                    
                    else:
                        # Paso gen√©rico - ejecutar con Ollama
                        if ollama_service:
                            logger.info(f"‚ö° Executing generic step: {step['title']}")
                            
                            generic_prompt = f"""
Ejecuta el paso '{step['title']}' para la tarea: {message}

Descripci√≥n: {step['description']}
Contexto previo: {final_results if final_results else 'Inicio de tarea'}

Proporciona un resultado espec√≠fico y √∫til para este paso.
"""
                            
                            result = ollama_service.generate_response(generic_prompt, {})
                            
                            step_result = {
                                'type': 'generic',
                                'content': result.get('response', 'Paso completado'),
                                'summary': f"Paso '{step['title']}' completado exitosamente"
                            }
                            
                            step['result'] = step_result
                            final_results.append(step_result)
                            logger.info(f"‚úÖ Generic step completed: {step['title']}")
                        else:
                            time.sleep(2)
                    
                    # Marcar paso como completado
                    step['completed'] = True
                    step['active'] = False
                    step['status'] = 'completed'
                    
                    logger.info(f"‚úÖ Step {i+1} completed successfully: {step['title']}")
                    
                    # Pausa entre pasos para dar tiempo a mostrar progreso
                    time.sleep(2)
                    
                except Exception as step_error:
                    logger.error(f"‚ùå Error in step {i+1}: {str(step_error)}")
                    step['completed'] = False
                    step['active'] = False
                    step['status'] = 'failed'
                    step['error'] = str(step_error)
                
                # Actualizar plan en memoria
                active_task_plans[task_id]['plan'] = steps
            
            # GENERAR RESULTADO FINAL CONSOLIDADO
            if final_results:
                logger.info(f"üéØ Generating final consolidated result for task {task_id}")
                
                try:
                    if ollama_service:
                        final_prompt = f"""
TAREA COMPLETADA: {message}

RESULTADOS OBTENIDOS:
{final_results}

Genera un RESULTADO FINAL CONSOLIDADO que incluya:

1. üéØ RESUMEN EJECUTIVO
   - Qu√© se solicit√≥
   - Qu√© se logr√≥
   - Calidad del resultado

2. üìã ENTREGABLES PRINCIPALES
   - Lista clara de lo que se entreg√≥
   - Resultados espec√≠ficos obtenidos

3. üîç HALLAZGOS CLAVE (si aplica)
   - Informaci√≥n importante encontrada
   - Insights relevantes

4. ‚úÖ CONCLUSIONES
   - Evaluaci√≥n del √©xito de la tarea
   - Recomendaciones adicionales

Formato: Profesional, estructurado y completo.
"""
                        
                        final_result = ollama_service.generate_response(final_prompt, {})
                        
                        # Guardar resultado final
                        active_task_plans[task_id]['final_result'] = {
                            'content': final_result.get('response', 'Tarea completada exitosamente'),
                            'completed_at': datetime.now().isoformat(),
                            'total_steps': len(steps),
                            'all_results': final_results
                        }
                        
                        logger.info(f"‚úÖ Final consolidated result generated for task {task_id}")
                        
                except Exception as e:
                    logger.error(f"Error generating final result: {str(e)}")
                    active_task_plans[task_id]['final_result'] = {
                        'content': 'Tarea completada con algunos errores en la consolidaci√≥n final',
                        'completed_at': datetime.now().isoformat(),
                        'total_steps': len(steps),
                        'error': str(e)
                    }
            
            # Marcar tarea como completada
            active_task_plans[task_id]['status'] = 'completed'
            active_task_plans[task_id]['completed_at'] = datetime.now().isoformat()
            
            logger.info(f"üéâ Task {task_id} completed successfully with REAL execution and final delivery!")
        
        # Ejecutar en hilo separado
        thread = threading.Thread(target=execute_steps)
        thread.daemon = True
        thread.start()
        
        logger.info(f"üöÄ Started REAL plan execution for task {task_id}")
        
    except Exception as e:
        logger.error(f"Error in real plan execution: {str(e)}")
        
        # Marcar como fallido
        if task_id in active_task_plans:
            active_task_plans[task_id]['status'] = 'failed'
            active_task_plans[task_id]['error'] = str(e)

def extract_search_query_from_message(message: str, step_title: str) -> str:
    """
    Extrae una query de b√∫squeda relevante del mensaje original
    """
    try:
        # Remover palabras comunes y conectores
        stop_words = ['el', 'la', 'los', 'las', 'un', 'una', 'de', 'del', 'en', 'con', 'por', 'para', 'sobre', 'crear', 'buscar', 'dame', 'necesito']
        
        # Usar el mensaje original como base
        words = [word for word in message.lower().split() if word not in stop_words and len(word) > 2]
        
        # Tomar las primeras 3-4 palabras m√°s relevantes
        query = ' '.join(words[:4])
        
        # Si la query est√° vac√≠a, usar el t√≠tulo del paso
        if not query.strip():
            query = step_title.replace('B√∫squeda de', '').replace('informaci√≥n', '').strip()
        
        return query or message[:50]  # Fallback al mensaje original truncado
        
    except Exception:
        return message[:50]  # Fallback seguro

def generate_dynamic_plan_with_ai(message: str, task_id: str) -> dict:
    """
    Genera un plan din√°mico y espec√≠fico usando IA para analizar la tarea
    """
    try:
        # Obtener servicio de Ollama para generar plan din√°mico
        ollama_service = get_ollama_service()
        
        if not ollama_service:
            logger.warning(f"‚ö†Ô∏è Ollama service not available for task {task_id}, using fallback plan")
            return generate_fallback_plan(message, task_id)
        
        # Verificar si Ollama est√° funcionando
        if not ollama_service.is_healthy():
            logger.warning(f"‚ö†Ô∏è Ollama not healthy for task {task_id}, using fallback plan")
            return generate_fallback_plan(message, task_id)

        logger.info(f"ü§ñ Generating AI-powered plan for task {task_id}: '{message[:50]}...'")
        
        # Prompt mejorado para generar plan espec√≠fico y personalizado
        plan_prompt = f"""
Eres un planificador de tareas especializado. Tu trabajo es crear planes de acci√≥n 100% personalizados y espec√≠ficos.

TAREA A PLANIFICAR: "{message}"

INSTRUCCIONES CR√çTICAS:
1. Analiza profundamente la tarea espec√≠fica, NO uses plantillas gen√©ricas
2. Cada paso debe ser √öNICO y ESPEC√çFICO para esta tarea exacta
3. Los t√≠tulos deben reflejar exactamente lo que se va a hacer, no frases gen√©ricas
4. Las descripciones deben ser detalladas y actionables
5. Los tiempos estimados deben ser realistas para cada acci√≥n espec√≠fica

Herramientas disponibles: web_search, analysis, planning, creation, delivery, synthesis, data_analysis, processing

FORMATO DE RESPUESTA (JSON v√°lido solamente):
{{
  "task_type": "[investigaci√≥n/creaci√≥n/an√°lisis/desarrollo/etc]",
  "complexity": "[baja/media/alta]",
  "estimated_total_time": "[tiempo total realista]",
  "steps": [
    {{
      "id": "step_1",
      "title": "[T√≠tulo espec√≠fico y √∫nico para esta tarea]",
      "description": "[Descripci√≥n detallada de la acci√≥n espec√≠fica a realizar]",
      "tool": "[herramienta espec√≠fica a usar]",
      "estimated_time": "[tiempo realista para esta acci√≥n espec√≠fica]",
      "priority": "[alta/media/baja]"
    }},
    {{
      "id": "step_2", 
      "title": "[Siguiente paso espec√≠fico basado en la tarea]",
      "description": "[Qu√© se har√° exactamente en este paso]",
      "tool": "[herramienta espec√≠fica]",
      "estimated_time": "[tiempo para este paso]",
      "priority": "[alta/media/baja]"
    }}
  ]
}}

EJEMPLO de c√≥mo S√ç hacer un plan espec√≠fico:
Si la tarea es "Crear un informe sobre inteligencia artificial en medicina":
- T√≠tulo: "Investigaci√≥n de aplicaciones de IA en diagn√≥sticos m√©dicos actuales"
- Descripci√≥n: "Buscar estudios y casos de uso espec√≠ficos de IA en radiolog√≠a, patolog√≠a y diagn√≥sticos automatizados publicados en 2023-2024"

EJEMPLO de c√≥mo NO hacer (gen√©rico):
- T√≠tulo: "B√∫squeda de informaci√≥n" ‚ùå
- Descripci√≥n: "Buscar informaci√≥n sobre el tema" ‚ùå

GENERA SOLO JSON V√ÅLIDO, sin texto adicional:
"""
        
        # Generar plan usando Ollama con mejor prompt
        logger.info(f"üì§ Sending plan generation request to Ollama for task {task_id}")
        response = ollama_service.generate_response(plan_prompt, {})
        
        if response.get('error'):
            logger.error(f"‚ùå Ollama error generating AI plan for task {task_id}: {response['error']}")
            return generate_fallback_plan(message, task_id)
        
        logger.info(f"üì• Received response from Ollama for task {task_id}: {len(response.get('response', ''))} characters")
        
        try:
            import json
            import re
            
            # Extraer JSON del response con m√∫ltiples estrategias
            response_text = response['response'].strip()
            logger.info(f"üîç Raw Ollama response for task {task_id}: {response_text[:200]}...")
            
            # Estrategia 1: Buscar JSON completo
            json_match = re.search(r'\{(?:[^{}]|{[^{}]*})*\}', response_text, re.DOTALL)
            
            if not json_match:
                # Estrategia 2: Buscar entre marcadores comunes
                json_match = re.search(r'```json\s*(\{.*?\})\s*```', response_text, re.DOTALL)
                if json_match:
                    response_text = json_match.group(1)
                else:
                    # Estrategia 3: Todo el texto si parece JSON
                    if response_text.startswith('{') and response_text.endswith('}'):
                        json_match = type('obj', (object,), {'group': lambda x=0: response_text})()
            
            if json_match:
                json_text = json_match.group() if hasattr(json_match, 'group') else json_match.group(0)
                logger.info(f"üéØ Extracted JSON for task {task_id}: {json_text[:150]}...")
                
                try:
                    plan_data = json.loads(json_text)
                    logger.info(f"‚úÖ Successfully parsed JSON for task {task_id}: {plan_data.keys()}")
                except json.JSONDecodeError as json_err:
                    logger.error(f"‚ùå JSON decode error for task {task_id}: {json_err}")
                    # Intentar limpiar JSON com√∫n
                    cleaned_json = json_text.replace('```json', '').replace('```', '').strip()
                    try:
                        plan_data = json.loads(cleaned_json)
                        logger.info(f"‚úÖ Successfully parsed cleaned JSON for task {task_id}")
                    except:
                        logger.error(f"‚ùå Failed to parse cleaned JSON for task {task_id}, using fallback")
                        return generate_fallback_plan(message, task_id)
                
                # Validar que el plan tenga la estructura esperada
                if not isinstance(plan_data.get('steps'), list) or len(plan_data.get('steps', [])) == 0:
                    logger.error(f"‚ùå Invalid plan structure for task {task_id}: no valid steps found")
                    return generate_fallback_plan(message, task_id)
                
                # Convertir a formato frontend
                plan_steps = []
                for i, step in enumerate(plan_data.get('steps', [])):
                    if not isinstance(step, dict):
                        logger.warning(f"‚ö†Ô∏è Invalid step format for task {task_id}, step {i}: {step}")
                        continue
                        
                    plan_steps.append({
                        'id': f"step_{i+1}",
                        'title': step.get('title', f'Paso {i+1}').strip(),
                        'description': step.get('description', 'Procesando...').strip(),
                        'tool': step.get('tool', 'processing'),
                        'status': 'pending',
                        'estimated_time': step.get('estimated_time', '1 minuto'),
                        'completed': False,
                        'active': i == 0,  # Solo el primer paso activo
                        'priority': step.get('priority', 'media')
                    })
                
                if len(plan_steps) == 0:
                    logger.error(f"‚ùå No valid steps created for task {task_id}")
                    return generate_fallback_plan(message, task_id)
                
                # Guardar plan en memoria global
                active_task_plans[task_id] = {
                    'plan': plan_steps,
                    'current_step': 0,
                    'status': 'executing',
                    'created_at': datetime.now().isoformat(),
                    'start_time': datetime.now(),
                    'message': message,
                    'task_type': plan_data.get('task_type', 'general'),
                    'complexity': plan_data.get('complexity', 'media'),
                    'ai_generated': True  # Marcar como generado por IA
                }
                
                logger.info(f"üéâ Generated AI-powered plan for task {task_id} with {len(plan_steps)} specific steps")
                logger.info(f"üìã Plan steps for task {task_id}: {[step['title'] for step in plan_steps]}")
                
                return {
                    'steps': plan_steps,
                    'total_steps': len(plan_steps),
                    'estimated_total_time': plan_data.get('estimated_total_time', '2-5 minutos'),
                    'task_type': plan_data.get('task_type', 'ai_generated_dynamic'),
                    'complexity': plan_data.get('complexity', 'media'),
                    'ai_generated': True
                }
                
            else:
                logger.error(f"‚ùå No JSON found in AI response for task {task_id}, using fallback")
                return generate_fallback_plan(message, task_id)
                
        except (json.JSONDecodeError, KeyError) as e:
            logger.error(f"‚ùå Error parsing AI plan response for task {task_id}: {e}")
            return generate_fallback_plan(message, task_id)
            
    except Exception as e:
        logger.error(f"‚ùå Unexpected error generating AI plan for task {task_id}: {str(e)}")
        return generate_fallback_plan(message, task_id)

def generate_fallback_plan(message: str, task_id: str) -> dict:
    """
    Genera un plan de fallback cuando la IA no est√° disponible
    """
    try:
        # Analizar el mensaje para determinar el tipo de tarea
        message_lower = message.lower()
        
        # Determinar pasos basados en el tipo de tarea - M√ÅS ESPEC√çFICO
        if any(word in message_lower for word in ['crear', 'generar', 'escribir', 'desarrollar', 'dise√±ar', 'construir']):
            task_subject = message.replace('crear', '').replace('generar', '').replace('escribir', '').replace('desarrollar', '').strip()
            plan_steps = [
                {
                    'id': 'step_1',
                    'title': f'An√°lisis de requisitos para: {task_subject}',
                    'description': f'Analizar requisitos espec√≠ficos para {task_subject}',
                    'tool': 'analysis',
                    'status': 'pending',
                    'estimated_time': '30 segundos',
                    'completed': False,
                    'active': True
                },
                {
                    'id': 'step_2',
                    'title': f'Planificaci√≥n detallada',
                    'description': f'Crear estructura y planificar desarrollo de {task_subject}',
                    'tool': 'planning',
                    'status': 'pending',
                    'estimated_time': '45 segundos',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_3',
                    'title': f'Desarrollo/Creaci√≥n',
                    'description': f'Ejecutar creaci√≥n de {task_subject}',
                    'tool': 'creation',
                    'status': 'pending',
                    'estimated_time': '2-3 minutos',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_4',
                    'title': 'Revisi√≥n y entrega final',
                    'description': f'Revisar y entregar {task_subject} completado',
                    'tool': 'delivery',
                    'status': 'pending',
                    'estimated_time': '30 segundos',
                    'completed': False,
                    'active': False
                }
            ]
        elif any(word in message_lower for word in ['buscar', 'investigar', 'analizar', 'estudiar', 'revisar']):
            research_topic = message.replace('buscar', '').replace('investigar', '').replace('analizar', '').replace('informaci√≥n sobre', '').strip()
            plan_steps = [
                {
                    'id': 'step_1',
                    'title': f'Definici√≥n de b√∫squeda sobre: {research_topic}',
                    'description': f'Definir par√°metros de investigaci√≥n para {research_topic}',
                    'tool': 'search_definition',
                    'status': 'pending',
                    'estimated_time': '20 segundos',
                    'completed': False,
                    'active': True
                },
                {
                    'id': 'step_2',
                    'title': f'B√∫squeda de informaci√≥n',
                    'description': f'Buscar informaci√≥n relevante sobre {research_topic}',
                    'tool': 'web_search',
                    'status': 'pending',
                    'estimated_time': '1-2 minutos',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_3',
                    'title': f'An√°lisis de datos encontrados',
                    'description': f'Analizar informaci√≥n sobre {research_topic}',
                    'tool': 'data_analysis',
                    'status': 'pending',
                    'estimated_time': '1 minuto',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_4',
                    'title': f'S√≠ntesis y presentaci√≥n',
                    'description': f'Sintetizar resultados sobre {research_topic}',
                    'tool': 'synthesis',
                    'status': 'pending',
                    'estimated_time': '45 segundos',
                    'completed': False,
                    'active': False
                }
            ]
        else:
            # Plan m√°s espec√≠fico para otras tareas
            plan_steps = [
                {
                    'id': 'step_1',
                    'title': f'An√°lisis de: "{message}"',
                    'description': f'Analizar y comprender la tarea: {message}',
                    'tool': 'analysis',
                    'status': 'pending',
                    'estimated_time': '30 segundos',
                    'completed': False,
                    'active': True
                },
                {
                    'id': 'step_2',
                    'title': f'Procesamiento de la solicitud',
                    'description': f'Procesar y ejecutar: {message}',
                    'tool': 'processing',
                    'status': 'pending',
                    'estimated_time': '1-2 minutos',
                    'completed': False,
                    'active': False
                },
                {
                    'id': 'step_3',
                    'title': f'Entrega de resultados',
                    'description': f'Entregar resultados finales para: {message}',
                    'tool': 'delivery',
                    'status': 'pending',
                    'estimated_time': '30 segundos',
                    'completed': False,
                    'active': False
                }
            ]
        
        # Guardar plan en memoria global con timestamp
        active_task_plans[task_id] = {
            'plan': plan_steps,
            'current_step': 0,
            'status': 'executing',
            'created_at': datetime.now().isoformat(),
            'start_time': datetime.now(),  # Para tracking del tiempo real
            'message': message
        }
        
        return {
            'steps': plan_steps,
            'total_steps': len(plan_steps),
            'estimated_total_time': '2-4 minutos',
            'task_type': 'structured_execution'
        }
        
    except Exception as e:
        logger.error(f"Error generating structured plan: {str(e)}")
        # Plan de fallback simple
        fallback_plan = [
            {
                'id': 'step_1',
                'title': 'Procesando solicitud',
                'description': 'Procesando tu solicitud...',
                'tool': 'processing',
                'status': 'pending',
                'estimated_time': '1 minuto',
                'completed': False,
                'active': True
            }
        ]
        
        active_task_plans[task_id] = {
            'plan': fallback_plan,
            'current_step': 0,
            'status': 'executing',
            'created_at': datetime.now().isoformat(),
            'message': message
        }
        
        return {
            'steps': fallback_plan,
            'total_steps': 1,
            'estimated_total_time': '1 minuto',
            'task_type': 'simple_execution'
        }



def generate_clean_response(ollama_response: str, tool_results: list) -> str:
    """
    Genera una respuesta limpia sin mostrar los pasos internos del plan
    """
    try:
        # Para tareas complejas, siempre generar una respuesta profesional est√°ndar
        clean_response = """Perfecto, he recibido tu solicitud y ya estoy trabajando en ella. 

He generado un plan de acci√≥n detallado que puedes ver en la secci√≥n "Plan de Acci√≥n" del panel lateral. El plan incluye varios pasos que ejecutar√© autom√°ticamente para completar tu tarea.

Mientras trabajo en tu solicitud, puedes seguir el progreso en tiempo real a trav√©s del panel de monitoreo."""
        
        # Si hay resultados de herramientas, agregar un resumen limpio
        if tool_results:
            tools_summary = []
            successful_tools = 0
            failed_tools = 0
            
            for result in tool_results:
                if result.get('error'):
                    failed_tools += 1
                else:
                    successful_tools += 1
                    # Agregar informaci√≥n √∫til del resultado si est√° disponible
                    if isinstance(result.get('result'), dict):
                        if 'output' in result['result']:
                            tools_summary.append(f"‚úÖ {result['tool']}: Completado exitosamente")
            
            # Agregar resumen al final de la respuesta
            if successful_tools > 0 or failed_tools > 0:
                clean_response += f"\n\n---\n**üîß Herramientas utilizadas:** {successful_tools} exitosas"
                if failed_tools > 0:
                    clean_response += f", {failed_tools} con errores"
                clean_response += "\n"
                
                # Agregar detalles de herramientas exitosas
                for summary in tools_summary[:3]:  # M√°ximo 3 para no saturar
                    clean_response += f"{summary}\n"
        
        return clean_response
        
    except Exception as e:
        logger.error(f"Error generating clean response: {str(e)}")
        # Fallback: respuesta est√°ndar
        return """He recibido tu solicitud y estoy trabajando en ella. 

Puedes ver el progreso del plan de acci√≥n en el panel lateral derecho. El plan se ejecutar√° autom√°ticamente paso a paso."""

@agent_bp.route('/chat', methods=['POST'])
def chat():
    """
    Endpoint principal del chat - VERSI√ìN REAL CON OLLAMA
    Distingue entre conversaciones casuales y tareas complejas
    GENERA PLAN ESTRUCTURADO PARA MOSTRAR EN PLAN DE ACCI√ìN
    """
    try:
        data = request.get_json()
        message = data.get('message', '')
        context = data.get('context', {})
        
        if not message:
            return jsonify({'error': 'Message is required'}), 400
        
        # Obtener task_id del contexto
        task_id = context.get('task_id', str(uuid.uuid4()))
        
        logger.info(f"üöÄ Processing message: {message[:50]}... (ID: {task_id})")
        
        # Obtener servicio de Ollama
        ollama_service = get_ollama_service()
        if not ollama_service:
            return jsonify({
                'error': 'Ollama service not available',
                'response': 'Lo siento, el servicio de IA no est√° disponible en este momento.'
            }), 503
        
        # PASO 1: Detectar si es conversaci√≥n casual o tarea compleja
        is_casual = is_casual_conversation(message)
        
        if is_casual:
            # MODO CONVERSACI√ìN CASUAL
            logger.info(f"üó£Ô∏è Detected casual conversation mode")
            
            # Usar solo Ollama para respuesta casual
            ollama_response = ollama_service.generate_casual_response(message, context)
            
            if ollama_response.get('error'):
                return jsonify({
                    'error': ollama_response['error'],
                    'response': ollama_response['response']
                }), 500
            
            return jsonify({
                'response': ollama_response['response'],
                'task_id': task_id,
                'timestamp': datetime.now().isoformat(),
                'execution_status': 'completed',
                'mode': 'casual_conversation',
                'memory_used': True
            })
        
        else:
            # MODO AGENTE CON PLANIFICACI√ìN ESTRUCTURADA
            logger.info(f"ü§ñ Detected task mode - generating structured plan")
            
            # PASO 2: Generar plan din√°mico PRIMERO usando IA
            structured_plan = generate_dynamic_plan_with_ai(message, task_id)
            
            # PASO 3: Generar respuesta usando Ollama con contexto de herramientas
            ollama_response = ollama_service.generate_response(message, context, use_tools=True)
            
            if ollama_response.get('error'):
                return jsonify({
                    'error': ollama_response['error'],
                    'response': ollama_response['response']
                }), 500
            
            # PASO 4: Procesar tool_calls si existen
            tool_results = []
            if ollama_response.get('tool_calls'):
                logger.info(f"üîß Processing {len(ollama_response['tool_calls'])} tool calls")
                tool_manager = get_tool_manager()
                
                if tool_manager:
                    for tool_call in ollama_response['tool_calls']:
                        try:
                            tool_name = tool_call.get('tool')
                            parameters = tool_call.get('parameters', {})
                            
                            logger.info(f"üîß Executing tool: {tool_name}")
                            
                            # Ejecutar herramienta real
                            tool_result = tool_manager.execute_tool(tool_name, parameters)
                            tool_results.append({
                                'tool': tool_name,
                                'parameters': parameters,
                                'result': tool_result
                            })
                            
                        except Exception as e:
                            logger.error(f"Error executing tool {tool_name}: {str(e)}")
                            tool_results.append({
                                'tool': tool_name,
                                'parameters': parameters,
                                'error': str(e)
                            })
            
            # PASO 5: Generar respuesta LIMPIA sin mostrar pasos del plan
            final_response = generate_clean_response(ollama_response['response'], tool_results)
            
            # PASO 6: Ejecutar plan autom√°ticamente
            execute_plan_with_real_tools(task_id, structured_plan['steps'], message)
            
            logger.info(f"‚úÖ Task completed successfully with structured plan")
            
            return jsonify({
                'response': final_response,
                'task_id': task_id,
                'plan': structured_plan,  # PLAN ESTRUCTURADO PARA FRONTEND
                'tool_calls': ollama_response.get('tool_calls', []),
                'tool_results': tool_results,
                'timestamp': datetime.now().isoformat(),
                'execution_status': 'completed',
                'mode': 'agent_with_structured_plan',
                'memory_used': True
            })
    
    except Exception as e:
        logger.error(f"Error general en chat: {str(e)}")
        return jsonify({
            'error': f'Error interno del servidor: {str(e)}',
            'response': 'Lo siento, hubo un error procesando tu solicitud.'
        }), 500

@agent_bp.route('/generate-plan', methods=['POST'])
def generate_plan():
    """
    Endpoint para generar planes de acci√≥n din√°micos usando IA
    """
    try:
        data = request.get_json()
        task_title = data.get('task_title', '')
        
        if not task_title:
            return jsonify({'error': 'task_title is required'}), 400
        
        # Generar task_id temporal
        task_id = str(uuid.uuid4())
        
        logger.info(f"üöÄ Generating dynamic plan for: {task_title}")
        
        # Usar la nueva funci√≥n de generaci√≥n din√°mica con IA
        dynamic_plan = generate_dynamic_plan_with_ai(task_title, task_id)
        
        logger.info(f"‚úÖ Dynamic plan generated with {len(dynamic_plan['steps'])} steps")
        
        return jsonify({
            'plan': dynamic_plan['steps'],
            'task_id': task_id,
            'total_steps': dynamic_plan['total_steps'],
            'estimated_total_time': dynamic_plan['estimated_total_time'],
            'task_type': dynamic_plan['task_type'],
            'complexity': dynamic_plan.get('complexity', 'media'),
            'timestamp': datetime.now().isoformat(),
            'status': 'plan_generated'
        })
    
    except Exception as e:
        logger.error(f"Error generating dynamic plan: {str(e)}")
        return jsonify({
            'error': f'Error generando plan: {str(e)}'
        }), 500

@agent_bp.route('/update-task-progress', methods=['POST'])
def update_task_progress():
    """Actualiza el progreso de una tarea"""
    try:
        data = request.get_json() or {}
        task_id = data.get('task_id', '')
        step_id = data.get('step_id', '')
        completed = data.get('completed', False)
        
        if not task_id or not step_id:
            return jsonify({'error': 'task_id and step_id are required'}), 400
        
        # Actualizar progreso en memoria
        if task_id in active_task_plans:
            plan = active_task_plans[task_id]['plan']
            for step in plan:
                if step['id'] == step_id:
                    step['completed'] = completed
                    step['status'] = 'completed' if completed else 'pending'
                    break
            
            # Actualizar plan en memoria
            active_task_plans[task_id]['plan'] = plan
        
        return jsonify({
            'success': True,
            'task_id': task_id,
            'step_id': step_id,
            'completed': completed
        })
        
    except Exception as e:
        logger.error(f"Error updating task progress: {str(e)}")
        return jsonify({
            'error': f'Error actualizando progreso: {str(e)}'
        }), 500

@agent_bp.route('/update-task-time/<task_id>', methods=['POST'])
def update_task_time(task_id):
    """Actualiza el tiempo transcurrido de una tarea en tiempo real"""
    try:
        if task_id in active_task_plans:
            plan_data = active_task_plans[task_id]
            start_time = plan_data.get('start_time')
            
            if start_time:
                # Calcular tiempo transcurrido
                elapsed = datetime.now() - start_time
                elapsed_seconds = int(elapsed.total_seconds())
                
                # Formatear tiempo como MM:SS
                minutes = elapsed_seconds // 60
                seconds = elapsed_seconds % 60
                elapsed_str = f"{minutes}:{seconds:02d}"
                
                # Actualizar el paso activo
                plan = plan_data['plan']
                for step in plan:
                    if step.get('active', False):
                        step['elapsed_time'] = f"{elapsed_str} Pensando"
                        break
                
                # Actualizar en memoria
                active_task_plans[task_id]['plan'] = plan
                
                return jsonify({
                    'success': True,
                    'elapsed_time': elapsed_str,
                    'plan': plan
                })
            
        return jsonify({'error': 'Task not found'}), 404
        
    except Exception as e:
        logger.error(f"Error updating task time: {str(e)}")
        return jsonify({'error': str(e)}), 500

@agent_bp.route('/get-task-plan/<task_id>', methods=['GET'])
def get_task_plan(task_id):
    """Obtiene el plan de una tarea espec√≠fica con progreso actualizado"""
    try:
        if task_id in active_task_plans:
            plan_data = active_task_plans[task_id]
            
            # Calcular progreso
            completed_steps = sum(1 for step in plan_data['plan'] if step['completed'])
            total_steps = len(plan_data['plan'])
            progress_percentage = (completed_steps / total_steps) * 100 if total_steps > 0 else 0
            
            return jsonify({
                'plan': plan_data['plan'],
                'current_step': plan_data['current_step'],
                'status': plan_data['status'],
                'created_at': plan_data['created_at'],
                'progress': progress_percentage,
                'completed_steps': completed_steps,
                'total_steps': total_steps,
                'message': plan_data.get('message', ''),
                'final_result': plan_data.get('final_result'),  # Incluir resultado final
                'updated_at': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'error': 'Task plan not found'
            }), 404
    
    except Exception as e:
        logger.error(f"Error getting task plan: {str(e)}")
        return jsonify({
            'error': f'Error obteniendo plan: {str(e)}'
        }), 500

@agent_bp.route('/get-final-result/<task_id>', methods=['GET'])
def get_final_result(task_id):
    """Obtiene el resultado final de una tarea completada"""
    try:
        if task_id in active_task_plans:
            plan_data = active_task_plans[task_id]
            
            if plan_data['status'] == 'completed' and 'final_result' in plan_data:
                return jsonify({
                    'task_id': task_id,
                    'status': 'completed',
                    'final_result': plan_data['final_result'],
                    'plan_summary': {
                        'total_steps': len(plan_data['plan']),
                        'completed_steps': sum(1 for step in plan_data['plan'] if step['completed']),
                        'task_type': plan_data.get('task_type', 'general'),
                        'complexity': plan_data.get('complexity', 'media')
                    }
                })
            else:
                return jsonify({
                    'task_id': task_id,
                    'status': plan_data['status'],
                    'message': 'Tarea a√∫n no completada o sin resultado final'
                })
        else:
            return jsonify({
                'error': 'Task not found'
            }), 404
    
    except Exception as e:
        logger.error(f"Error getting final result: {str(e)}")
        return jsonify({
            'error': f'Error obteniendo resultado final: {str(e)}'
        }), 500

@agent_bp.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'services': {
            'ollama': True,  # Simplified
            'tools': 12,     # Simplified
            'database': True # Simplified
        }
    })

@agent_bp.route('/status', methods=['GET'])
def agent_status():
    """Status del agente"""
    return jsonify({
        'status': 'running',
        'timestamp': datetime.now().isoformat(),
        'active_tasks': len(active_task_plans),
        'ollama': {
            'connected': True,
            'endpoint': 'https://78d08925604a.ngrok-free.app',
            'model': 'llama3.1:8b'
        },
        'tools': 12,
        'memory': {
            'enabled': True,
            'initialized': True
        }
    })

# Mantener endpoints adicionales necesarios para compatibilidad
@agent_bp.route('/generate-suggestions', methods=['POST'])
def generate_suggestions():
    """Genera sugerencias din√°micas simples"""
    try:
        # Sugerencias est√°ticas simples pero √∫tiles
        suggestions = [
            {
                'title': 'Buscar informaci√≥n sobre IA',
                'description': 'Investigar las √∫ltimas tendencias en inteligencia artificial',
                'type': 'research'
            },
            {
                'title': 'Analizar datos de mercado',
                'description': 'Realizar an√°lisis de tendencias del mercado actual',
                'type': 'analysis'
            },
            {
                'title': 'Crear documento t√©cnico',
                'description': 'Generar documentaci√≥n t√©cnica profesional',
                'type': 'creation'
            }
        ]
        
        return jsonify({
            'suggestions': suggestions,
            'timestamp': datetime.now().isoformat()
        })
    
    except Exception as e:
        logger.error(f"Error generating suggestions: {str(e)}")
        return jsonify({
            'suggestions': [],
            'error': str(e)
        }), 500

# Endpoints de archivos simplificados
@agent_bp.route('/upload-files', methods=['POST'])
def upload_files():
    """Manejo simplificado de archivos"""
    try:
        files = request.files.getlist('files')
        task_id = request.form.get('task_id', str(uuid.uuid4()))
        
        # Procesar archivos de manera simple
        uploaded_files = []
        for file in files:
            if file and file.filename:
                file_id = str(uuid.uuid4())
                uploaded_files.append({
                    'id': file_id,
                    'name': file.filename,
                    'size': len(file.read()),
                    'mime_type': file.mimetype or 'application/octet-stream'
                })
        
        # Guardar referencias en memoria
        if task_id not in task_files:
            task_files[task_id] = []
        task_files[task_id].extend(uploaded_files)
        
        return jsonify({
            'files': uploaded_files,
            'task_id': task_id,
            'message': f'Se subieron {len(uploaded_files)} archivos exitosamente'
        })
    
    except Exception as e:
        logger.error(f"Error uploading files: {str(e)}")
        return jsonify({
            'error': f'Error subiendo archivos: {str(e)}'
        }), 500

@agent_bp.route('/get-task-files/<task_id>', methods=['GET'])
def get_task_files(task_id):
    """Obtiene archivos de una tarea"""
    try:
        files = task_files.get(task_id, [])
        return jsonify({
            'files': files,
            'task_id': task_id,
            'count': len(files)
        })
    
    except Exception as e:
        logger.error(f"Error getting task files: {str(e)}")
        return jsonify({
            'error': f'Error obteniendo archivos: {str(e)}'
        }), 500

@agent_bp.route('/ollama/check', methods=['POST'])
def check_ollama_connection():
    """Verifica conexi√≥n con Ollama"""
    try:
        data = request.get_json() or {}
        endpoint = data.get('endpoint', 'https://78d08925604a.ngrok-free.app')
        
        # Simular verificaci√≥n exitosa
        return jsonify({
            'connected': True,
            'endpoint': endpoint,
            'status': 'healthy'
        })
    
    except Exception as e:
        logger.error(f"Error checking Ollama connection: {str(e)}")
        return jsonify({
            'connected': False,
            'error': str(e)
        }), 500

@agent_bp.route('/ollama/models', methods=['POST'])
def get_ollama_models():
    """Obtiene modelos disponibles de Ollama"""
    try:
        data = request.get_json() or {}
        endpoint = data.get('endpoint', 'https://78d08925604a.ngrok-free.app')
        
        # Simular modelos disponibles
        models = [
            {'name': 'llama3.1:8b', 'size': '4.7GB'},
            {'name': 'deepseek-r1:32b', 'size': '20GB'},
            {'name': 'qwen3:32b', 'size': '18GB'}
        ]
        
        return jsonify({
            'models': models,
            'endpoint': endpoint,
            'count': len(models)
        })
    
    except Exception as e:
        logger.error(f"Error getting Ollama models: {str(e)}")
        return jsonify({
            'models': [],
            'error': str(e)
        }), 500