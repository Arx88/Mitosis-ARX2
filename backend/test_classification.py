#!/usr/bin/env python3
"""
Test para verificar que el sistema de clasificaci√≥n funcione correctamente 
para tareas de navegaci√≥n web
"""

import sys
sys.path.append('/app/backend/src')

def test_classification_system():
    """Test para verificar que los mensajes de navegaci√≥n web se clasifiquen correctamente"""
    
    # Simular la funci√≥n de clasificaci√≥n del agent_routes.py
    def classify_message_mode(message: str) -> str:
        message_lower = message.lower().strip()
        
        # Patrones de navegaci√≥n web espec√≠ficos
        web_navigation_patterns = [
            # Navegaci√≥n espec√≠fica
            'navega a', 'navigate to', 'abre la p√°gina', 'open page',
            've al sitio', 'go to site', 'visita la web', 'visit website',
            'entra en', 'enter', 'accede a', 'access to',
            
            # Acciones web espec√≠ficas
            'crea una cuenta en', 'create account on', 'reg√≠strate en', 'register on',
            'inicia sesi√≥n en', 'log into', 'busca en google', 'search google',
            'compra en', 'buy on', 'descarga de', 'download from',
            'sube a', 'upload to', 'publica en', 'post on',
            
            # Combinaciones comunes
            'twitter y crea', 'facebook y registra', 'google y busca',
            'youtube y sube', 'instagram y publica', 'linkedin y conecta'
        ]
        
        # Verificar patrones de navegaci√≥n web
        if any(pattern in message_lower for pattern in web_navigation_patterns):
            return 'agent'
        
        # Browser automation - CR√çTICO PARA NAVEGACI√ìN Y AUTOMATIZACI√ìN
        advanced_tools_patterns = [
            'navega', 'navigate', 'abre', 'open', 'visita', 'visit', 've a', 'go to',
            'crea cuenta', 'create account', 'reg√≠strate', 'register', 'sign up',
            'inicia sesi√≥n', 'log in', 'login', 'accede', 'access',
            'llena', 'fill', 'completa', 'complete', 'formulario', 'form',
            'haz clic', 'click', 'presiona', 'press', 'selecciona', 'select',
            'busca en', 'search in', 'extrae', 'extract', 'obt√©n', 'get',
            'automatiza', 'automate', 'simula', 'simulate', 'interact√∫a', 'interact',
            'twitter', 'facebook', 'instagram', 'linkedin', 'github', 'google',
            'youtube', 'amazon', 'ebay', 'wikipedia', 'stackoverflow',
            'web scraping', 'scraping', 'captura', 'capture', 'screenshot'
        ]
        
        if any(pattern in message_lower for pattern in advanced_tools_patterns):
            return 'agent'
        
        # Por defecto, usar modo discusi√≥n
        return 'discussion'
    
    # Casos de prueba
    test_cases = [
        {
            'message': 'navega a google.com y busca informaci√≥n sobre inteligencia artificial',
            'expected': 'agent',
            'reason': 'Contiene "navega a" y "busca en"'
        },
        {
            'message': 've a twitter.com y crea una cuenta',
            'expected': 'agent',
            'reason': 'Contiene "ve a" y "crea cuenta"'
        },
        {
            'message': 'abre facebook.com',
            'expected': 'agent',
            'reason': 'Contiene "abre" y "facebook"'
        },
        {
            'message': 'visita youtube.com y busca videos',
            'expected': 'agent',
            'reason': 'Contiene "visita" y "youtube"'
        },
        {
            'message': 'qu√© es la inteligencia artificial',
            'expected': 'discussion',
            'reason': 'Pregunta casual, no navegaci√≥n'
        },
        {
            'message': 'hola como estas',
            'expected': 'discussion',
            'reason': 'Saludo casual'
        },
        {
            'message': 'automatiza el registro en github',
            'expected': 'agent',
            'reason': 'Contiene "automatiza" y "github"'
        }
    ]
    
    print("üß™ === TEST CLASIFICACI√ìN DE NAVEGACI√ìN WEB ===")
    
    passed = 0
    failed = 0
    
    for test_case in test_cases:
        message = test_case['message']
        expected = test_case['expected']
        reason = test_case['reason']
        
        actual = classify_message_mode(message)
        
        if actual == expected:
            print(f"‚úÖ PAS√ì: '{message}' ‚Üí {actual} ({reason})")
            passed += 1
        else:
            print(f"‚ùå FALL√ì: '{message}' ‚Üí {actual} (esperado: {expected}) ({reason})")
            failed += 1
    
    print(f"\nüìä RESULTADOS: {passed} pasaron, {failed} fallaron")
    
    if failed == 0:
        print("üéâ ¬°Todos los tests pasaron!")
    else:
        print("‚ö†Ô∏è  Algunos tests fallaron - revisar l√≥gica de clasificaci√≥n")
    
    return failed == 0

if __name__ == "__main__":
    test_classification_system()